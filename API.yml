openapi: 3.0.3
info:
  title: LibCal Public API
  description: The LibCal Public API 1.1 routes
  version: '1.1'
servers:
  - url: /1.1
security:
  - OAuth: []
components:
  securitySchemes:
    OAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
tags:
  - name: Auth
  - name: Appointments
  - name: Billing
  - name: Calendars
  - name: Equipment
  - name: Events
  - name: Hours
  - name: Spaces / Seats
  - name: Tickets & Passes
paths:
  /oauth/token:
    post:
      tags:
        - Auth
      summary: Obtain an Access Token
      description: Obtain an access token for all BEARER Authorization headers
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                client_id:
                  description: The Application Client Id
                  type: integer
                client_secret:
                  description: The Application Client Secret
                  type: string
                grant_type:
                  description: The Grant Type - value is always client_credentials
                  type: string
                  default: client_credentials
              required:
                - client_id
                - client_secret
                - grant_type
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  expires_in:
                    type: integer
                  token_type:
                    type: string
                  scope:
                    type: string
              example:
                - access_token: 0123...sample.token.here...2076c
                  expires_in: 3600
                  token_type: Bearer
                  scope: cal_r ev_r ev_w ms_r rm_r eq_r eq_w sp_r sp_w h_r
        400:
          description: Failed operation
          content:
            application/json:
              examples:
                ex1:
                  summary: Invalid Client
                  description: The client credentials such as client_id or client_secret are invalid
                  value:
                    error: The client credentials are invalid
                ex2:
                  summary: Unsupported grant type
                  description: The grant type is incorrect. Only client_credentials is supported.
                  value:
                    error: Grant type not supported
  /billing/transactions:
    get:
      tags:
        - Billing
      summary: Returns billing transaction details
      parameters:
        - name: from
          in: query
          description: 'The date when you want to start returning transactions from.<br>Format: YYYY-MM-DD.'
          required: true
          schema:
            type: string
            format: date
        - name: to
          in: query
          description: 'The date when you want to stop returning transactions. Maximum range of 365 days.<br>Format: YYYY-MM-DD.'
          required: true
          schema:
            type: string
            format: date
        - name: type
          in: query
          description: 'Limit results to specific transactions.<br>
0 = All transactions<br>
1 = Payments only<br>
2 = Refunds only'
          required: false
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              example:
                - success: true
                  data:
                    - type: payment
                      id: abc1234
                      email: a.patron@somewhere.com
                      date: '2024-04-02T12:50:49+11:00'
                      amount: 12.75
                      source: equip/space
                      source_id: cs_yGKNuA
                    - type: refund
                      id: def5678
                      email: john.patron@somewhere.com
                      date: '2024-03-25T12:59:15+11:00'
                      amount: 7.5
                      source: event
                      source_id: '5985'
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: Invalid Date
                  value: invalid "date" value
                example2:
                  summary: Date range too long
                  value: "Date range must be less than or equal to 365 days."
  /appointments:
    get:
      tags:
        - Appointments
      summary: Returns a list of available appointments for a specific user from your system.
      parameters:
        - name: user_id
          in: query
          description: 'The User ID you wish to return data from.'
          required: true
          schema:
            type: integer
        - name: location_id
          in: query
          description: 'Pass a location id here to only use availability for that location.'
          required: false
          schema:
            type: integer
        - name: group_id
          in: query
          description: 'Pass a group id here to only use availability for that group. Note that the group id is only used when a location id is also provided.'
          required: false
          schema:
            type: integer
        - name: category_id
          in: query
          description: 'Pass a category id here to return appointments for that category duration.'
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: 'Limit the number of appointments to return.<br>Range: 1-100.'
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              example:
                - user_id: 1
                  first_name: Anthony
                  last_name: Patron
                  email: a.patron@somewhere.com
                  url: https://example.libcal.com/appointments/anthony
                  description: <p>This is the html description field.</p>
                  appointments:
                    - start: 2024-04-17T10:00:00+11:00
                      end: 2024-04-17T11:00:00+11:00
                      locationId: 4
                      groupId: 0
                    - start: 2024-04-17T11:00:00+11:00
                      end: 2024-04-17T12:00:00+11:00
                      locationId: 4
                      groupId: 0
                    - start: 2024-04-17T16:00:00+11:00
                      end: 2024-04-17T17:00:00+11:00
                      locationId: 5
                      groupId: 1
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: Invalid input ids provided
                  value: invalid inputs
                example2:
                  summary: Invalid user id provided
                  value: no user/data found. ensure user has appointments enabled.
                example3:
                  summary: Invalid category id provided
                  value: category not found
  /appointments/bookings:
    get:
      tags:
        - Appointments
      summary: Returns a list of Appointments Booking details.
      parameters:
        - name: user_id
          in: query
          description: 'Pass a user id here to only show bookings for that user.'
          required: false
          schema:
            type: integer
        - name: location_id
          in: query
          description: 'Pass a location id here to only show bookings for that location.'
          required: false
          schema:
            type: integer
        - name: group_id
          in: query
          description: 'Pass a group id here to only show bookings for that group.'
          required: false
          schema:
            type: integer
        - name: category_id
          in: query
          description: 'Pass a category id here to only show bookings for that category.'
          required: false
          schema:
            type: integer
        - name: email
          in: query
          description: 'Pass an email address to only show bookings made by that patron.'
          required: false
          schema:
            type: string
        - name: date
          in: query
          description: 'The date to retrieve bookings. Accepts dates in the past.<br>Format: YYYY-MM-DD.'
          required: false
          schema:
            type: string
            format: date
            default: <Today's Date>
        - name: days
          in: query
          description: 'The number of days into the future to retrieve bookings from, starting from [date] parameter.<br>Range: 0-365.'
          required: false
          schema:
            type: integer
            default: 7
            minimum: 0
            maximum: 365
        - name: include_cancellations
          in: query
          description: 'Include any cancellations as part of the booking data.'
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: 'How many bookings to return, max value is 500.<br>Range: 1-500.'
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 500
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              example:
                - id: 40949
                  fromDate: "2024-04-17T10:00:00+11:00"
                  toDate: "2024-04-17T11:00:00+11:00"
                  firstName: "John"
                  lastName: "Patron"
                  email: "john.patron@somewhere.com"
                  account: "jpatron"
                  userId: 243
                  location: "Eastern Campus"
                  locationId: 44
                  group: ""
                  groupId: 0
                  categoryId: 987
                  directions: "Room 161"
                  answers:
                    - q1: "Chocolate"
                      q2: "Oakland"
                - id: 40999,
                  fromDate: "2024-04-17T13:00:00+11:00"
                  toDate: "2024-04-17T14:30:00+11:00"
                  firstName: "Billy"
                  lastName: "Smith"
                  email: "bsmith@somewhere.com"
                  userId: 243
                  location: "Western Campus"
                  locationId: 44
                  group: "Tutor Services"
                  groupId: 923
                  categoryId: 47
                  directions: ""
                  userShowedUp: "true"
                  answers:
                    - q1: "Vanilla"
                      q2: "Richmond"
  /appointments/categories:
    get:
      tags:
        - Appointments
      summary: Returns a list of appointment categories from your system.
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              example:
                - id: 123
                  name: "Short Consultation"
                  duration: 60
                - id: 456
                  name: "Long Consultation"
                  duration: 120
  /appointments/form/{id}:
    get:
      tags:
        - Appointments
      summary: Returns the details of an Appointment booking form.
      parameters:
        - name: id
          in: path
          description: 'A form id or a comma-separated list of form ids to retrieve. A limit of 100 form ids can be retrieved.'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              example:
                - id: 782
                  name: "Reference Desk form"
                  questions:
                    - id: 393
                      label: "Enter a brief description about your appointment"
                      type: "string"
                      required: true
                - id: 4556
                  name: "IT Help Desk form"
                  questions:
                    - id: 653
                      label: "Enter a brief description about your problem"
                      type: "string"
                      required: true
                    - id: 657
                      label: "Your Operating System"
                      type: "radio"
                      required: true
                      options:
                        - "Windows"
                        - "Mac"
                        - "Other"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: No form ids provided
                  value: must supply at least 1 form id
                example2:
                  summary: Limit for one request exceeded
                  value: too many form ids requested
  /appointments/question/{id}:
    get:
      tags:
        - Appointments
      summary: Returns the details of Appointment booking form questions.
      parameters:
        - name: id
          in: path
          description: 'A question id or comma-separated list of question ids to retrieve.'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              example:
                - id: 98
                  label: "Which is your favorite flavor of ice-cream?"
                  type: "dropdown"
                  required: false
                  options:
                    - "Vanilla"
                    - "Strawberry"
                    - "Chocolate"
                - id: 455
                  label: "Any additional comments for this booking."
                  type: "string"
                  required: false
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: No question ids provided
                  value: must supply at least 1 question id
  /appointments/users:
    get:
      tags:
        - Appointments
      summary: Returns a list of Appointments Users from your system.
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              example:
                - id: 123
                  first_name: "Justin"
                  last_name: "Time"
                  email: "justin@email.com"
                - id: 673
                  first_name: "Bobby"
                  last_name: "Smith"
                  email: "bsmith@email.com"
  /appointments/user/{id}/form:
    get:
      tags:
        - Appointments
      summary: Returns an Appointment booking form based on input criteria.
      parameters:
        - name: id
          in: path
          description: 'A user id.'
          required: true
          schema:
            type: integer
        - name: location_id
          in: query
          description: 'The Location Id.'
          required: true
          schema:
            type: integer
            default: 0
        - name: group_id
          in: query
          description: 'The Group Id.'
          required: false
          schema:
            type: integer
            default: 0
        - name: category_id
          in: query
          description: 'The Category Id.'
          required: false
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: "Successful operation<br>Note: An successful empty response will indicate no booking form is defined, simply using Name & Email."
          content:
            application/json:
              example:
                - id: 4556
                  name: "IT Help Desk form"
                  questions:
                    - id: 653
                      label: "Enter a brief description about your problem"
                      type: "string"
                      required: true
                    - id: 657
                      label: "Your Operating System"
                      type: "radio"
                      required: true
                      options:
                        - "Windows"
                        - "Mac"
                        - "Other"
  /passes/institutions:
    get:
      tags:
        - Tickets & Passes
      summary: Returns a list of all institutions in your system.
      parameters:
        - name: admin_only
          in: query
          description: 'Flag to indicate you want admin-only institutions included in your request.'
          required: false
          schema:
            type: integer
            default: 0
        - name: details
          in: query
          description: 'Flag to indicate you want additional details such as description, URL & terms and conditions.'
          required: false
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - id: "a8f6447fabc"
                  name: "ABC Museum"
                  public: 1
                  admin_only: 0
                - id: "bbds343abc"
                  name: "Art Gallery Place"
                  public: 1
                  admin_only: 0
                - id: "ccdwd45abc"
                  name: "Zedd Gallery"
                  public: 0
                  admin_only: 1
  /passes/institutions/{id}:
    get:
      tags:
        - Tickets & Passes
      summary: Returns a specific institution(s) in your system.
      parameters:
        - name: id
          in: path
          description: 'An institution id or comman-separated list of institution ids to retrieve.'
          required: true
          schema:
            type: string
        - name: details
          in: query
          description: 'Flag to indicate you want additional details such as description, URL & terms and conditions.'
          required: false
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - id: "a8f6447fabc"
                  name: "ABC Museum"
                  public: 1
                  admin_only: 0
                - id: "bbds343abc"
                  name: "Art Gallery Place"
                  public: 1
                  admin_only: 0
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: No institution id provided.
                  value: must supply at least one "id"
                example2:
                  summary: Request exceeds API limits.
                  value: maximum of 50 ids
  /passes/digital/{id}:
    get:
      tags:
        - Tickets & Passes
      summary: Returns all digital passes for a specific institution in your system.
      parameters:
        - name: id
          in: path
          description: 'An institution id.'
          required: true
          schema:
            type: string
        - name: date
          in: query
          description: 'Returns all active passes on this date.<br>Format: YYYY-MM-DD.'
          required: true
          schema:
            type: string
            format: date
            default: <Today's Date>
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - id: "asdfer3452"
                  name: "ABC Museum Pass A"
                - id: "bbds343abc"
                  name: "ABC Museum Pass Z"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: Invalid institution id provided.
                  value: Invalid value.
  /passes/digital/{id}/availability:
    get:
      tags:
        - Tickets & Passes
      summary: Returns all digital pass availability for a specific institution in a given date range.
      parameters:
        - name: id
          in: path
          description: 'An institution id.'
          required: true
          schema:
            type: string
        - name: from
          in: query
          description: 'The date when you want to start returning availability from.<br>Format: YYYY-MM-DD.'
          required: false
          schema:
            type: string
            format: date
            default: <Today's Date>
        - name: to
          in: query
          description: 'The date when you want to end returning availability. Maximum range of 31 days.<br>Format: YYYY-MM-DD.'
          required: false
          schema:
            type: string
            format: date
            default: <Today's Date>
      responses:
        200:
          description: "Successful operation<br>
          The response will contain an array of available dates and an array of closed dates.<br>
Each date in the array available dates contains the digital pass ids that are available on that date.<br>
Any date in the given range that is not available or not closed is assumed to be unavailable (booked out due to booking limits, no passes defined etc.)."
          content:
            application/json:
              example:
                - id: "asdfer3452"
                  name: "ABC Museum Pass A"
                  available:
                    - 2024-04-17:
                        - "f95cd32e9744"
                        - "e2e445cd2ec7"
                    - 2024-04-15:
                        - "f95cd32e9744"
                  closed:
                    - "2024-04-20"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: Invalid institution id provided.
                  value: Invalid value.
                example2:
                  summary: Invalid start/end date provided.
                  value: the 'from' date must be prior to the 'to' date
                example3:
                  summary: Invalid date range provided.
                  value: date range must be less than or equal to 31 days
  /passes/bookings/digital:
    get:
      tags:
        - Tickets & Passes
      summary: Returns a list of digital pass bookings in your system.
      parameters:
        - name: from
          in: query
          description: 'The date when you want to start returning bookings from.<br>Format: YYYY-MM-DD.'
          required: false
          schema:
            type: string
            format: date
            default: <Today's Date>
        - name: to
          in: query
          description: 'The date when you want to end returning bookings. Maximum range of 365 days.<br>Format: YYYY-MM-DD.'
          required: false
          schema:
            type: string
            format: date
            default: <Today's Date>
        - name: institution
          in: query
          description: 'Filter results by a specific institution id.'
          required: false
          schema:
            type: string
        - name: include_confirmed
          in: query
          description: 'Flag to include confirmed bookings.'
          required: false
          schema:
            type: boolean
            default: 1
        - name: include_tentative
          in: query
          description: 'Flag to include tentative and mediated tentative bookings'
          required: false
          schema:
            type: integer
            default: 0
        - name: include_cancelled
          in: query
          description: 'Flag to include cancelled bookings'
          required: false
          schema:
            type: integer
            default: 0
        - name: search_mode
          in: query
          description: 'Search bookings based on this search criteria. Note: A "search_value" parameter is also required when using this parameter
If you provide "email" for this option it will match bookings based on email address.
If you provide "full_name" for this option it will match bookings based on exact full name.
If you provide "first_name" for this option it will match bookings based on first name.
If you provide "last_name" for this option it will match bookings based on last name.'
          required: false
          schema:
            type: string
            default: 'options: email, full_name, first_name, last_name'
        - name: search_value
          in: query
          description: 'This is the search value/term to search based on the "search_mode" you provided.'
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: 'How many bookings to return per page, max value is 500.<br>Range: 1-500.'
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 500
        - name: page
          in: query
          description: 'Which page of results to return. 1 for first page, 2 for second page, etc.'
          required: false
          schema:
            type: integer
            default: 1
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - total: 1
                  bookings:
                    - id: "37cfe1aca9cc"
                      institution: "Bendigo Art Gallery"
                      institution_id: "93a625b1dc35"
                      pass: "Pass A"
                      pass_id: "d9d3171ba666"
                      patron_name: "Billy Bob"
                      patron_email: "billy@email.com"
                      from: "2024-04-17"
                      to: "2024-04-20"
                      created: "2024-04-17T03:05:24+10:00"
                      status: "Confirmed"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: Invalid start/end date provided.
                  value: the 'from' date must be prior to the 'to' date
                example2:
                  summary: Error response for invalid booking state.
                  value: date range must be less than or equal to 31 days
                example3:
                  summary: Invalid start/end date provided.
                  value: at least one of "include_tentative", "include_confirmed" or "include_cancelled" must be true
                example4:
                  summary: Error response for invalid search.
                  value: to search, both "search_mode" and "search_value" are required
                example5:
                  summary: Invalid search mode provided.
                  value: "invalid \"search_mode\", valid values are: 'email', 'full_name', 'first_name', 'last_name'"
                example6:
                  summary: Invalid page value provided.
                  value: "invalid \"page\" value, must be >= 1"
                example7:
                  summary: Invalid institution id provided.
                  value: invalid institution id
                example8:
                  summary: Unable to obtain search results.
                  value: Invalid value.
  /passes/booking/digital/{id}:
    get:
      tags:
        - Tickets & Passes
      summary: Returns information about specific digital pass bookings in your system.
      parameters:
        - name: id
          in: path
          description: 'A booking id or comma-separated list of booking ids to retrieve. Maximum of 50.'
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Successful operation<br>
          The response will contain an array of available dates and an array of closed dates.<br>
Each date in the array available dates contains the digital pass ids that are available on that date.<br>
Any date in the given range that is not available or not closed is assumed to be unavailable (booked out due to booking limits, no passes defined etc.)."
          content:
            application/json:
              example:
                - id: "37cfe1aca9cc"
                  institution: "Bendigo Art Gallery"
                  institution_id: "93a625b1dc35"
                  pass: "Pass A"
                  pass_id: "d9d3171ba666"
                  patron_name: "Billy Bob"
                  patron_email: "billy@email.com"
                  from: "2024-04-17"
                  to: "2024-04-20"
                  created: "2024-04-17T03:05:24+10:00"
                  status: "Confirmed"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: No booking id provided.
                  value: must supply at least one "id"
                example2:
                  summary: Request exceeds API limits.
                  value: maximum of 50 ids
  /hours/{id}:
    get:
      tags:
        - Hours
      summary: Returns a list of hours for locations in your system.
      parameters:
        - name: id
          in: path
          description: 'A location id or comma-separated list of location ids to retrieve.'
          required: true
          schema:
            type: integer
        - name: from
          in: query
          description: 'The date to return hours from.<br>Format: YYYY-MM-DD.'
          required: false
          schema:
            type: string
            format: date
            default: <Today's Date>
        - name: to
          in: query
          description: 'The date to return hours to. Maximum of 100 days after the from date.<br>Format: YYYY-MM-DD.'
          required: false
          schema:
            type: string
            format: date
            default: <Today's Date>
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - lid: 65
                  name: "Main Library"
                  category: "library"
                  desc: "This is our main library"
                  url: "https://main.library.com"
                  contact: "john.doe@main.library.com"
                  lat: "123"
                  long: "456"
                  color: "#000"
                  fn: "Footnote"
                  dates:
                    - 2024-04-17:
                        - status: "open"
                          hours:
                            - from: "12:00pm"
                              to: "7:45pm"
                      2024-04-18:
                        - status: "open"
                          hours:
                            - from: "7:30am"
                              to: "7:45pm"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: Invalid from date.
                  value: invalid "from" date
                example2:
                  summary: Invalid "to" date.
                  value: invalid "to" date
                example3:
                  summary: Date range invalid.
                  value: "\"from\" date cannot be later than \"to\" date"
                example4:
                  summary: Date range too large.
                  value: too many days between the "from" and "to" dates, max is 100
                example5:
                  summary: No location ids provided.
                  value: no location ids provided
  /equipment/locations:
    get:
      tags:
        - Equipment
      summary: Returns a list of public and private equipment locations from your system.
      parameters:
        - name: details
          in: query
          description: 'Flag to indicate you want additional details about each location.'
          required: false
          schema:
            type: integer
            default: 0
        - name: admin_only
          in: query
          description: 'Flag to indicate you want admin-only locations included in your request.'
          required: false
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - lid: 33
                  name: "Main Campus"
                  public: 1
                  formid: 38
                  admin_only: 0
                - lid: 34
                  name: "Second Campus"
                  public: 0
                  admin_only: 1
  /equipment/form/{id}:
    get:
      tags:
        - Equipment
      summary: Returns the details of an equipment bookings form.
      parameters:
        - name: id
          in: path
          description: 'A form id or comma-separated list of form ids to retrieve.'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - id: 38
                  name: "Simple Form"
                  fields:
                    fname:
                      label: "First Name"
                      type: "string"
                      required: true
                    lname:
                      label: "Last Name"
                      type: "string"
                      required: true
                    email:
                      label: "Email"
                      type: "string"
                      required: true
                    q43:
                      id: 43
                      label: "Which is your favorite flavor of ice-cream?"
                      type: "dropdown"
                      required: false
                      options:
                        - "Vanilla"
                        - "Strawberry"
                        - "Chocolate"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: No form ids provided.
                  value: must supply at least 1 form id
  /equipment/question/{id}:
    get:
      tags:
        - Equipment
      summary: Returns the details of equipment bookings form questions.
      parameters:
        - name: id
          in: path
          description: 'A question id or comma-separated list of question ids to retrieve.'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - id: 43
                  label: "Which is your favorite flavor of ice-cream?"
                  type: "dropdown"
                  required: false
                  options:
                    - "Vanilla"
                    - "Strawberry"
                    - "Chocolate"
                - id: 8
                  label: "Any additional comments for this booking."
                  type: "string"
                  required: false
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: No question ids provided.
                  value: must supply at least 1 question id
  /equipment/categories/{id}:
    get:
      tags:
        - Equipment
      summary: Returns a list of equipment categories for locations in your system.
      parameters:
        - name: id
          in: path
          description: 'A location id or comma-separated list of location ids to retrieve.'
          required: true
          schema:
            type: integer
        - name: admin_only
          in: query
          description: 'Flag to indicate you want admin-only categories included in your request.'
          required: false
          schema:
            type: integer
            default: 0
        - name: details
          in: query
          description: 'Flag to indicate you want additional details about each category.'
          required: false
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - lid: 33
                  name: "Main Campus"
                  categories:
                    - cid: 58
                      name: "Laptops"
                      formid: 12
                      public: 0
                      admin_only: 1
                      termsAndConditions: "T&C's"
                    - cid: 148
                      name: "Video Games"
                      formid: 14
                      public: 0
                      admin_only: 0
                      termsAndConditions: "T&C's"
                    - cid: 151
                      name: "Books"
                      formid: 12
                      public: 1
                      admin_only: 0
                      termsAndConditions: "T&C's"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: No location ids provided.
                  value: must supply at least 1 location id
  /equipment/category/{id}:
    get:
      tags:
        - Equipment
      summary: Returns information about equipment categories in your system.
      parameters:
        - name: id
          in: path
          description: 'A category id or comma-separated list of category ids to retrieve.'
          required: true
          schema:
            type: integer
        - name: details
          in: query
          description: 'Flag to indicate you want additional details about each item.<br>
          Note: This should only be used for systems that do not contain thousands of items.'
          required: false
          schema:
            type: integer
            default: 0
        - name: admin_only
          in: query
          description: 'Flag to indicate you want admin-only categories included in your request.'
          required: false
          schema:
            type: integer
            default: 0
        - name: availability
          in: query
          description: 'Either a single date, or a comma separated list of 2 dates (a start and end date, max range of 31 days).
The keyword "next" can be used to return availability for the first date that any of the matching resources are available.<br>
Note: Setting this value also sets the details value to true.<br>Format: YYYY-MM-DD.'
          required: false
          schema:
            type: string
            format: date
            default: <Today's Date>
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              examples:
                example1:
                  summary: Successful response.
                  value:
                    - cid: 58
                      formid: 14
                      public: 1
                      admin_only: 0
                      termsAndConditions: "T&C's"
                      items:
                        - 475
                        - 211
                        - 476
                example2:
                  summary: Successful response for invalid or admin only category ids.
                  value:
                    - cid: 1234
                      error: "invalid category id"
                    - cid: 1235
                      error: "category is restricted"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: No category ids provided.
                  value: must supply at least 1 category id
  /equipment/item/{id}:
    get:
      tags:
        - Equipment
      summary: Returns information + availability details of an equipment item in your system.
      parameters:
        - name: id
          in: path
          description: 'A item id or comma-separated list of item ids to retrieve.'
          required: true
          schema:
            type: integer
        - name: availability
          in: query
          description: 'Either a single date, or a comma separated list of 2 dates (a start and end date, max range of 31 days).
The keyword "next" can be used to return availability for the next date that this resource is available.<br>Format: YYYY-MM-DD.'
          required: false
          schema:
            type: string
            format: date
            default: <Today's Date>
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - id: 211
                  name: "Dell"
                  description: ""
                  image: "https://libapps.s3.amazonaws.com/path/to/images/pc.jpg"
                  barcode: "123"
                  instructions: ""
                  model: "Dimension 1100"
                  serial_number: "444"
                  asset_number: "55"
                  value: "1654"
                  replacement_cost: "1500"
                  damage_notes: "not broken"
                  service_history: "brand new"
                  formid: 14
                  availability:
                    - from: "2024-04-18T14:00:00+11:00"
                      to: "2024-04-18T14:30:00+11:00"
                    - from: "2024-04-18T14:30:00+11:00"
                      to: "2024-04-18T15:00:00+11:00"
                    - from: "2024-04-18T15:00:00+11:00"
                      to: "2024-04-18T15:30:00+11:00"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: No item ids provided.
                  value: must supply at least 1 item id
                example2:
                  summary: Item belongs to space category.
                  value: category is of incorrect type
                example3:
                  summary: Item belongs to admin only category.
                  value: category is restricted
  /equipment/items/{id}:
    get:
      tags:
        - Equipment
      summary: Returns information + availability details of equipment items in your system.
      parameters:
        - name: id
          in: path
          description: 'The location id to retrieve.'
          required: true
          schema:
            type: integer
        - name: category_id
          in: query
          description: 'Pass a category id to only show items from this category.'
          required: false
          schema:
            type: integer
        - name: visibility
          in: query
          description: 'If you provide a "category_id" then this option is ignored and all items for the "category_id" will be returned.
If you provide "private" for this option then items from both public and private categories will be returned.
If you provide "admin_only" for this option then all items for the location will be returned.<br>
Options: public, private, admin_only.'
          required: false
          schema:
            type: string
            default: public
        - name: availability
          in: query
          description: 'Either a single date, or a comma separated list of 2 dates (a start and end date, max range of 31 days).
The keyword "next" can be used to return availability for the next date that this resource is available.
The keyword "next_only" can be used to return availability for the next date that this resource is available. 
This will only return the first timeslot that the resource is available for. 
Also note that this method only searches up to 10 days ahead of the current date.<br>Format: YYYY-MM-DD.'
          required: false
          schema:
            type: string
            format: date
            default: <Today's Date>
        - name: page_index
          in: query
          description: 'For results pagination, this sets which page to retrieve (starting at 0 for the first page).'
          required: false
          schema:
            type: integer
            default: 0
        - name: page_size
          in: query
          description: 'For results pagination, this sets how many results per page to retrieve.<br>Range: 1-100.'
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - id: 123
                  name: "Laptop #1"
                  description: "Laptop with image editing software"
                  termsAndConditions: "the item terms and conditions"
                  image: "https://libapps.s3.amazonaws.com/path/to/images/seat.jpg"
                  barcode: "abc"
                  instructions: ""
                  model: "XPC-100"
                  serial_number: "asdf-123"
                  asset_number: "9876"
                  value: ""
                  replacement_cost: ""
                  damage_notes: "not broken"
                  service_history: "brand new"
                  formid: 545
                  groupId: 63
                  groupName: "Laptops"
                  groupTermsAndConditions: "Laptops terms and conditions"
                  locationTermsAndConditions: "Location 45 terms and conditions"
                  availability:
                    - from: "2024-04-18T14:00:00+11:00"
                      to: "2024-04-18T14:30:00+11:00"
                    - from: "2024-04-18T14:30:00+11:00"
                      to: "2024-04-18T15:00:00+11:00"
                    - from: "2024-04-18T15:00:00+11:00"
                      to: "2024-04-18T15:30:00+11:00"
                - id: 955
                  name: "Laptop #2"
                  description: "Laptop with image editing software"
                  termsAndConditions: "the item terms and conditions"
                  image: "https://libapps.s3.amazonaws.com/path/to/images/seat.jpg"
                  barcode: "kdf"
                  instructions: ""
                  model: "XPC-100"
                  serial_number: "asdf-453"
                  asset_number: "9877"
                  value: ""
                  replacement_cost: ""
                  damage_notes: "not broken"
                  service_history: "brand new"
                  formid: 545
                  groupId: 63
                  groupName: "Laptops"
                  groupTermsAndConditions: "Laptops terms and conditions"
                  locationTermsAndConditions: "Location 45 terms and conditions"
                  availability:
                    - from: "2024-04-18T14:00:00+11:00"
                      to: "2024-04-18T14:30:00+11:00"
                    - from: "2024-04-18T15:00:00+11:00"
                      to: "2024-04-18T15:30:00+11:00"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: No items match the filters.
                  value: No resources matching the filters.
  /equipment/item/status/{id}:
    get:
      tags:
        - Equipment
      summary: Returns the checked out status of an item.
      parameters:
        - name: id
          in: path
          description: 'The item id to retrieve.'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - eid: 45
                  item_name: "Laptop #1"
                  barcode: "599969656"
                  is_checked_out: true
                  bookId: "cs351PcG"
                  id: 54336
                  fromDate: "2024-04-18T10:00:00+11:00"
                  toDate: "2024-04-18T14:00:00+11:00"
                  created: "2024-04-18T01:57:24+11:00"
                  firstName: "John"
                  lastName: "Patron"
                  email: "john.patron@somewhere.com"
                  account: "jpatron"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: Item not found.
                  value: item not found
  /equipment/items/status/{id}:
    get:
      tags:
        - Equipment
      summary: Returns the checked out status of multiple items.
      parameters:
        - name: id
          in: path
          description: 'The location id to retrieve.'
          required: true
          schema:
            type: integer
        - name: category_id
          in: query
          description: 'Pass a category id to only show items from this category.'
          required: false
          schema:
            type: integer
        - name: visibility
          in: query
          description: 'If you provide a "category_id" then this option is ignored and all items for the "category_id" will be returned.
  If you provide "private" for this option then items from both public and private categories will be returned.
  If you provide "admin_only" for this option then all items for the location will be returned.<br>
  Options: public, private, admin_only.'
          required: false
          schema:
            type: string
            default: public
        - name: page_index
          in: query
          description: 'For results pagination, this sets which page to retrieve (starting at 0 for the first page).'
          required: false
          schema:
            type: integer
            default: 0
        - name: page_size
          in: query
          description: 'For results pagination, this sets how many results per page to retrieve.<br>Range: 1-100.'
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - eid: 75
                  item_name: "Laptop #1"
                  barcode: "abc"
                  is_checked_out: true
                  bookId: "cs351PcG"
                  id: 54336
                  fromDate: "2024-04-18T10:00:00+11:00"
                  toDate: "2024-04-18T14:00:00+11:00"
                  created: "2024-04-18T01:57:24+11:00"
                  firstName: "John"
                  lastName: "Patron"
                  email: "john.patron@somewhere.com"
                  account: "jpatron"
                - eid: 123
                  item_name: "Laptop #2"
                  barcode: "def"
                  is_checked_out: false
                  bookId: ""
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: No items match the filters
                  value: No resources matching the filters.
  /equipment/reserve:
    post:
      tags:
        - Equipment
      summary: Book pieces of equipment in your system.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                start:
                  description: Booking start date/time in ISO8601 format.
                  type: string
                fname:
                  description: First name of person making the booking.
                  type: string
                lname:
                  description: Last name of person making the booking.
                  type: string
                email:
                  description: Email address of person making the booking.
                  type: string
                account:
                  description: 'The account identifier for the patron. This will default to the email address if not included. 
                  When using LibAuth, set this to the patrons username/login/barcode.'
                  type: string
                  default: email
                bookings:
                  description: 'List of bookings to make, each element contains:<br>
1. id: The item to book.<br>
2. to: The date/time to book the item until in ISO8601 format.'
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                      to:
                        type: string
                custom form question ids:
                  description: 'The answers to any custom booking form questions (returned from /equipment_form request).
Note that some custom form questions can be marked as requiring an answer, in this case the booking will fail if an answer is not provided.'
                  type: string
                cost:
                  description: 'Provide a value to override the cost of the reservation, otherwise the cost will be determined from the billing rules. 
                  If a value of 0.0 is provided, the booking will have no charge.'
                  type: number
                adminbooking:
                  description: 'A flag to indicate if this is an admin booking. 
                  Admin bookings are exempt from patron booking rules such as daily limits, booking window limits, booking duration limits, etc.<br>
                  Value must be 1 or 0.'
                  type: number
                  default: 0
                test:
                  description: 'A flag to indicate if this is a test booking. 
                  If this flag is set the system will process the booking rules but not actually make the booking. 
                  This is a useful feature when developing an application that makes use of the booking API.
                  Value must be 1 or 0.'
                  type: number
                  default: 0
              required:
                - start
                - fname
                - lname
                - email
            example:
              start: '2023-07-15'
              fname: John
              lname: Smith
              email: 'john@example.com'
              q8: Question 8 Answer
              q4: Question 4 Answer
              q5:
                - Question 5 Answer 1
                - Question 5 Answer 2
              q9:
                - Question 9 Answer 1
                - Question 9 Answer 2
              bookings:
                - id: 54
                  to: '2024-07-15'
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - booking_id: mdZm15
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: No post body payload provided.
                  value: no data provided
                example2:
                  summary: Unable to decode post body payload json.
                  value: json syntax error
                example3:
                  summary: Error response when the data can be parsed, but multiple common values are invalid.
                  value: 'must supply start date for bookings
must supply first name of booking user
must supply last name of booking user
must supply email of booking user
must supply at least one booking'
                example4:
                  summary: Error response when the data can be parsed, but multiple booking details are invalid.
                  value: "booking 0 does not contain a valid item id or seat id
booking 1 does not contain a 'to' date
booking 2 'to' datetime is invalid
booking 3 'to' datetime must be after the booking 'start' datetime
booking 4 end date is in the past
booking 5 item location does not match item location of booking 0
booking 6 'from' is not a valid starting slot
booking 7 'to' is not a valid ending slot"
  /equipment/booking/{id}:
    get:
      tags:
        - Equipment
      summary: Returns information about specific bookings in your system. Cancelled bookings do not return data.
      parameters:
        - name: id
          in: path
          description: 'A booking id or comma-separated list of booking ids to retrieve. 
          Cancelled bookings do not return data.'
          required: true
          schema:
            type: string
        - name: form_answers
          in: query
          description: 'Flag to indicate if you want custom form answers to be returned.'
          required: false
          schema:
            type: integer
            default: 0
        - name: internal_notes
          in: query
          description: 'Flag to indicate if you want internal notes to be returned.'
          required: false
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - bookId: "mdZm15"
                  id: 25645
                  eid: 44
                  cid: 37
                  lid: 12
                  fromDate: "2024-04-18T10:00:00+11:00"
                  toDate: "2024-04-18T11:00:00+11:00"
                  created: "2024-04-16T05:23:19+11:00"
                  firstName: "John"
                  lastName: "Patron"
                  email: "john.patron@somewhere.com"
                  account: "jpatron"
                  status: "Confirmed"
                  location_name: "Main Campus"
                  category_name: "Laptops"
                  item_name: "Macbook Pro"
                  event:
                    id: 4186095
                    title: "Computer Group Meeting"
                  barcode: 546354545
                  q43: "patron answer"
                  q44: "patron answer 2"
                  internal_notes:
                    - name: "John"
                      created: "2024-04-22"
                      note: "note"
                    - name: "Jane"
                      created: "2024-04-22"
                      note: "note1"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: No booking ids provided.
                  value: must supply at least 1 booking id
  /equipment/bookings:
    get:
      tags:
        - Equipment
      summary: Returns a list of bookings in your system.
      parameters:
        - name: eid
          in: query
          description: 'Pass an item id here to only show bookings for that item.'
          required: false
          schema:
            type: integer
        - name: cid
          in: query
          description: 'Pass a category id here to only show bookings for that category.'
          required: false
          schema:
            type: integer
        - name: lid
          in: query
          description: 'Pass a location id here to only show bookings for that location.'
          required: false
          schema:
            type: integer
        - name: email
          in: query
          description: 'Pass an email address to only show bookings made by that patron.'
          required: false
          schema:
            type: string
        - name: date
          in: query
          description: 'The date to retrieve bookings. Dates in the past are ignored.<br>Format: YYYY-MM-DD.'
          required: false
          schema:
            type: string
            format: date
            default: <Today's Date>
        - name: days
          in: query
          description: 'The number of days into the future to retrieve bookings from, starting from [date] parameter.<br>Range: 0-365.'
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
            maximum: 365
        - name: limit
          in: query
          description: 'How many bookings to return per page. 
          If your request returns the same number of results as this "limit" value, you should request another "page" of results.'
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 500
        - name: page
          in: query
          description: 'Which page of results to return. 1 for first page, 2 for second page, etc.'
          required: false
          schema:
            type: integer
            default: 1
        - name: form_answers
          in: query
          description: 'Flag to indicate if you want custom form answers to be returned. 
          You can hit the /equipment/question endpoint to retrieve the details of the booking form questions.'
          required: false
          schema:
            type: integer
            default: 0
        - name: internal_notes
          in: query
          description: 'Flag to indicate if you want internal notes to be returned.'
          required: false
          schema:
            type: boolean
            default: false
        - name: include_tentative
          in: query
          description: 'Flag to include tentative and mediated tentative bookings'
          required: false
          schema:
            type: boolean
            default: 1
        - name: include_cancel
          in: query
          description: 'Flag to include canceled bookings'
          required: false
          schema:
            type: boolean
            default: 1
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - bookId: "mdZm15"
                  id: 23547
                  eid: 44
                  cid: 37
                  lid: 12
                  fromDate: "2024-04-18T10:00:00+11:00"
                  toDate: "2024-04-18T11:00:00+11:00"
                  created: "2024-04-16T07:13:21+11:00"
                  firstName: "John"
                  lastName: "Patron"
                  email: "john.patron@somewhere.com"
                  account: "jpatron"
                  status: "Confirmed"
                  location_name: "Main Campus"
                  category_name: "Laptops"
                  item_name: "Macbook Pro"
                  event: null
                  barcode: 546354545
                  q43: "patron answer"
                  internal_notes:
                    - name: "John"
                      created: "2024-04-22"
                      note: "note"
                    - name: "Jane"
                      created: "2024-04-22"
                      note: "note1"
                - bookId: "cskEDUqA"
                  id: 24268
                  eid: 38
                  cid: 37
                  lid: 12
                  fromDate: "2024-04-18T10:00:00+11:00"
                  toDate: "2024-04-18T14:00:00+11:00"
                  created: "2024-04-16T08:40:57+11:00"
                  firstName: "John"
                  lastName: "Patron"
                  email: "john.patron@somewhere.com"
                  account: "jpatron"
                  status: "Confirmed"
                  location_name: "Main Campus"
                  category_name: "Laptops"
                  item_name: "Notebook"
                  event:
                    id: 4186095
                    title: "Test Event"
                  barcode: 56875325
                  q42: "the answer to life, the universe and everything"
                  q43: "patron answer"
                  q44: "patron answer 2"
                  internal_notes:
                    - name: "Jill"
                      created: "2024-04-22"
                      note: "note"
                    - name: "June"
                      created: "2024-04-22"
                      note: "note1"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: Invalid date provided.
                  value: invalid "date" value
                example2:
                  summary: Invalid page provided.
                  value: invalid "page" value, must be >= 1
  /equipment/cancel/{id}:
    post:
      tags:
        - Equipment
      summary: Cancel an equipment booking.
      parameters:
        - name: id
          in: path
          description: 'A booking id or comma-separated list of booking ids to cancel.'
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - booking_id: "mdZm15"
                  cancelled: true
                - booking_id: "jXrm31"
                  cancelled: false
                  error: "invalid booking id"
                - booking_id: "KLx3m2"
                  cancelled: false
                  error: "unable to cancel booking, is in the past or was never confirmed"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: No booking ids provided.
                  value: must supply at least 1 booking id
  /equipment/overdue:
    get:
      tags:
        - Equipment
      summary: Returns list of overdue items (optionally restricted to a location or category) in your system.
      parameters:
        - name: lid
          in: query
          description: 'A location id, providing this will restrict results to only this location.'
          required: false
          schema:
            type: integer
        - name: cid
          in: query
          description: 'A category id, providing this will restrict results to only this category.'
          required: false
          schema:
            type: integer
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - email: "john.smith@gmail.com"
                  due_date: "2024-04-08T11:00:00+11:00"
                  lid: 33
                  cid: 7
                  id: 476
                  item_name: "iPad"
  /equipment/fines:
    get:
      tags:
        - Equipment
      summary: Returns a list of fines in your system.
      parameters:
        - name: email
          in: query
          description: 'Show fines only for this email address.'
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: 'One of "all", "paid" or "outstanding". 
          This will either show all fines, restrict to only fines that have been paid in full already, or restrict to only those that have not yet been paid in full.'
          required: false
          schema:
            type: string
            default: outstanding
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - fine_id: 18
                  fine_amount: "12.00"
                  fine_date: "2024-04-16T00:00:00+11:00"
                  paid_amount: "12.00"
                  booking:
                    email: "john.smith@gmail.com"
                    due_date: "2024-04-08T10:00:00+11:00"
                    lid: 33
                    cid: 58
                    id: 211
                    item_name: "Dell Laptop"
                - fine_id: 26,
                  fine_amount: "12.00"
                  fine_date: "2024-04-16T00:00:00+11:00"
                  paid_amount: "4.00"
                  booking:
                    email: "john.smith@gmail.com"
                    due_date: "2024-04-08T11:00:00+11:00"
                    lid: 33
                    cid: 7
                    id: 476
                    item_name: "iPad"
  /equipment/fine/{id}:
    get:
      tags:
        - Equipment
      summary: Returns details about a specific fine or fines in your system.
      parameters:
        - name: id
          in: path
          description: 'A fine id or comma-separated list of fine ids to retrieve.'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - fine_id: 26,
                  fine_amount: "12.00"
                  fine_date: "2024-04-16T00:00:00+11:00"
                  paid_amount: "4.00"
                  booking:
                    email: "john.smith@gmail.com"
                    due_date: "2024-04-08T11:00:00+11:00"
                    lid: 33
                    cid: 7
                    id: 476
                    item_name: "iPad"
                - fine_id: 27
                  error: "invalid fine id"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: No fine ids provided.
                  value: must supply at least 1 fine id
  /calendars:
    get:
      tags:
        - Calendars
      summary: Returns calendars from your system.
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - calendars:
                    - calid: "123"
                      name: "Training Sessions"
                      url:
                        public: "https://example.libcal.com/calendar/training"
                        admin: "https://example.libcal.com/admin/calendar/123"
                      owner:
                        id: 3465
                        name: "John Smith"
                      visibility: "Public"
                    - calid: "241"
                      name: "Library Tutorial Calendar"
                      url:
                        public: "https://example.libcal.com/calendar/libtutes"
                        admin: "https://example.libcal.com/admin/calendar/241"
                      owner:
                        id: 3465
                        name: "John Smith"
                      visibility: "Internal"
  /calendars/{id}:
    get:
      tags:
        - Calendars
      summary: Returns specific calendars from your system.
      parameters:
        - name: id
          in: path
          description: 'A calendar id or comma-separated list of calendar ids to retrieve.'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              examples:
                example1:
                  summary: Successful response.
                  value:
                    - calendars:
                        - calid: "123"
                          name: "Library Tutorial Calendar"
                          url:
                            public: "https://example.libcal.com/calendar/libtutes"
                            admin: "https://example.libcal.com/admin/calendar/241"
                          owner:
                            id: 3465
                            name: "John Smith"
                          visibility: "Internal"
                example2:
                  summary: Successful response for invalid calendar ids.
                  value:
                    - calendars: []
  /events:
    get:
      tags:
        - Events
      summary: Returns events from your system.
      parameters:
        - name: cal_id
          in: query
          description: 'The calendar ID you wish to return data from.'
          required: true
          schema:
            type: integer
        - name: date
          in: query
          description: 'The starting date to retrieve events. 
          Can accept dates from the past.<br>Format: YYYY-MM-DD.'
          required: false
          schema:
            type: string
            format: date
            default: <Today's Date>
        - name: days
          in: query
          description: 'The number of days into the future to retrieve events from, starting from [date] parameter.<br>Range: 0-365.'
          required: false
          schema:
            type: integer
            default: 30
            minimum: 0
            maximum: 365
        - name: limit
          in: query
          description: 'Limit the number of events to return.<br>Range: 1-500.'
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 500
        - name: campus
          in: query
          description: 'Filter events based on a Campus Id, or a comma-separated list of Campus Ids. 
          (Your Campus label is set as: "Campus").'
          required: false
          schema:
            type: integer
        - name: category
          in: query
          description: 'Filter events based on a Category Id, or a comma-separated list of Category Ids.'
          required: false
          schema:
            type: integer
        - name: audience
          in: query
          description: 'Filter events based on Audience Id, or a comma-separated list of Audience Ids.'
          required: false
          schema:
            type: integer
        - name: registration_type
          in: query
          description: 'Filter events based on registration type. 
          Options are "in-person", "online" and "both", for events that have both registration types.'
          required: false
          schema:
            type: string
        - name: tag
          in: query
          description: 'Filter events based on Internal Tag Id, or a comma-separated list of Internal Tag Ids.'
          required: false
          schema:
            type: integer
        - name: event_note
          in: query
          description: 'Option to return the event note.<br>
          Options: 0 or 1.'
          required: false
          schema:
            type: integer
            default: 0
        - name: internal_notes
          in: query
          description: 'Option to return the internal notes.<br>
          Options: 0 or 1.'
          required: false
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: 'Successful operation<br>
          Note: Registrations for an event are currently open if "has_registration_opened" is true and "has_registration_closed" is false.<br>
  The "attendance" array will only be present if either an in-person or online actual attendance value is set.<br>
  If a particular actual attendance value is not set, it will appear in the result as an empty string.'
          content:
            application/json:
              example:
                - id: 86121
                  title: "Friday night drinks!!"
                  allday: false
                  start: "2024-04-19T16:00:00+11:00"
                  end: "2024-04-22T20:00:00+11:00"
                  description: "Friday night social drinks!"
                  url:
                    public: "https://example.libcal.com/event/86121"
                    admin: "https://example.libcal.com/aevent.php?c=89&m=edit&event_id=86121"
                  location:
                    id: 1094
                    name: "Conference Room"
                  campus:
                    id: 45
                    name: "Melbourne"
                  audience:
                    - id: 7
                      name: "Teens"
                  category:
                    - id: 31
                      name: "Staff"
                    - id: 34
                      name: "Casuals"
                  owner:
                    id: 3465
                    name: "John Smith"
                  presenter: ""
                  featured_image: ""
                  future_dates:
                    - event_id: 86122
                      start: "2024-04-19T16:00:00+11:00"
                  calendar:
                    id: 89
                    name: "Staff Planner"
                    public: "https://example.libcal.com/calendar/staff"
                    admin: "https://example.libcal.com/admin/calendar/89"
                  registration: true
                  registration_form_id: 715
                  registration_series_linked: false
                  has_registration_opened: true
                  has_registration_closed: false
                  seats: 20
                  seats_taken: 15
                  physical_seats: 0
                  physical_seats_taken: 0
                  online_seats: 20
                  online_seats_taken: 15
                  wait_list: false
                  color: "#14C762"
                  registration_cost: "10.50"
                  attendance:
                    in_person: 22
                    online: ""
                  more_info: ""
                  setup_time: 0
                  teardown_time: 0
                  online_user_id: 0
                  zoom_email: ""
                  online_meeting_id: ""
                  online_host_url: ""
                  online_join_url: "https://url.com"
                  online_join_password: "pw"
                  online_provider: "external"
                  event_note: "event note"
                  internal_notes:
                    - "internal note 1"
                    - "internal note 2"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: No calendar id provided.
                  value: must supply 1 calendar id
  /events/{id}:
    get:
      tags:
        - Events
      summary: Returns a specific event from your system.
      parameters:
        - name: id
          in: path
          description: 'An event id or comma-separated list of event ids to retrieve. Can retrieve events from multiple calendars.'
          required: true
          schema:
            type: integer
        - name: event_note
          in: query
          description: 'Option to return the event note.<br>
          Options: 0 or 1.'
          required: false
          schema:
            type: integer
            default: 0
        - name: internal_notes
          in: query
          description: 'Option to return the internal notes.<br>
          Options: 0 or 1.'
          required: false
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: 'Successful operation<br>
Note: Registrations for an event are currently open if "has_registration_opened" is true and "has_registration_closed" is false.<br>
The "attendance" array will only be present if either an in-person or online actual attendance value is set.<br>
If a particular actual attendance value is not set, it will appear in the result as an empty string.'
          content:
            application/json:
              example:
                - id: 86121
                  title: "Friday night drinks!!"
                  allday: false
                  start: "2024-04-19T16:00:00+11:00"
                  end: "2024-04-22T20:00:00+11:00"
                  description: "Friday night social drinks!"
                  url:
                    public: "https://example.libcal.com/event/86121"
                    admin: "https://example.libcal.com/aevent.php?c=89&m=edit&event_id=86121"
                  location:
                    id: 1094
                    name: "Conference Room"
                  campus:
                    id: 45
                    name: "Melbourne"
                  audience:
                    - id: 7
                      name: "Teens"
                  category:
                    - id: 31
                      name: "Staff"
                    - id: 34
                      name: "Casuals"
                  owner:
                    id: 3465
                    name: "John Smith"
                  presenter: ""
                  featured_image: ""
                  future_dates:
                    - event_id: 86122
                      start: "2024-04-19T16:00:00+11:00"
                  calendar:
                    id: 89
                    name: "Staff Planner"
                    public: "https://example.libcal.com/calendar/staff"
                    admin: "https://example.libcal.com/admin/calendar/89"
                  registration: true
                  registration_form_id: 715
                  registration_series_linked: false
                  has_registration_opened: true
                  has_registration_closed: false
                  seats: 20
                  seats_taken: 15
                  physical_seats: 0
                  physical_seats_taken: 0
                  online_seats: 20
                  online_seats_taken: 15
                  wait_list: false
                  color: "#14C762"
                  registration_cost: "10.50"
                  attendance:
                    in_person: 22
                    online: ""
                  more_info: ""
                  setup_time: 0
                  teardown_time: 0
                  online_user_id: 0
                  zoom_email: ""
                  online_meeting_id: ""
                  online_host_url: ""
                  online_join_url: "https://url.com"
                  online_join_password: "pw"
                  online_provider: "external"
                  event_note: "event note"
                  internal_notes:
                    - "internal note 1"
                    - "internal note 2"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: No event ids provided.
                  value: must supply at least 1 event id
  /events/bookings:
    get:
      tags:
        - Events
      summary: Returns a list of bookings in your system.
      parameters:
        - name: lookup_method
          in: query
          description: 'The method used to identify the patron, must be one of "email", "barcode", or "phone".'
          required: true
          schema:
            type: string
        - name: lookup_value
          in: query
          description: "The information used to identify patron bookings, either the patron's email address, barcode or phone number."
          required: true
          schema:
            type: string
        - name: registration_type
          in: query
          description: 'If set, returns only registrations of the chosen type, either "in-person" or "online", or empty for both.'
          required: false
          schema:
            type: string
        - name: waitlist
          in: query
          description: 'If set to 1, wait list registrations will also be returned. 
          Value must be 1 or 0.'
          required: false
          schema:
            type: integer
            default: 0
        - name: date
          in: query
          description: 'The date to retrieve bookings. 
          Dates in the past are ignored.<br>Format: YYYY-MM-DD.'
          required: false
          schema:
            type: string
            format: date
            default: <Today's Date>
        - name: days
          in: query
          description: 'The number of days into the future to retrieve bookings from, starting from [date] parameter.<br>Range: 0-365.'
          required: false
          schema:
            type: integer
            default: 30
            minimum: 0
            maximum: 365
        - name: limit
          in: query
          description: 'How many bookings to return per page. 
          If your request returns the same number of results as this "limit" value, you should request another "page" of results.<br>Range: 1-500.'
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 500
        - name: page
          in: query
          description: 'Which page of results to return. 
          1 for first page, 2 for second page, etc.'
          required: false
          schema:
            type: integer
            default: 1
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              example:
                - is_waitlist: 0
                  booking_id: 4832
                  event_id: 445
                  registration_type: "in-person"
                  first_name: "John"
                  last_name: "Doe"
                  email: "john.doe@example.com"
                  barcode: "AB38FD4999CKK3RF"
                  phone: "555-333-5555"
                  registered_date: "2024-04-19 22:59:47"
                  event_start_date: "2024-04-22 22:59:47"
                - is_waitlist: 1
                  booking_id: 434
                  event_id: 446
                  registration_type: "online"
                  first_name: "John"
                  last_name: "Doe"
                  email: "john.doe@example.com"
                  barcode: "AB38FD4999CKK3RF"
                  phone: "555-333-5555"
                  registered_date: "2024-04-19 22:59:47"
                  event_start_date: "2024-04-22 00:00:00"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: Invalid days, limit, or page provided.
                  value: numeric field out of range
                example2:
                  summary: Invalid lookup method provided.
                  value: 'lookup_method must be one of: "email", "barcode" or "phone"'
                example3:
                  summary: Invalid lookup value provided.
                  value: Invalid Event ID.
                example4:
                  summary: Date not valid.
                  value: Invalid Date.
  /events/{id}/registrations:
    get:
      tags:
        - Events
      summary: Returns a list of event registrations details.
      parameters:
        - name: id
          in: path
          description: 'An event id or comma-separated list of event ids to get registrations for.'
          required: true
          schema:
            type: integer
        - name: registration_type
          in: query
          description: 'If set, returns only registrations of the chosen type, either "in-person" or "online".'
          required: false
          schema:
            type: string
        - name: waitlist
          in: query
          description: 'If set to 1, wait list registrations will also be returned. 
          Value must be 1 or 0.'
          required: false
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              example:
                - event_id: 55
                  registrants:
                    - event_id: 55
                      booking_id: 111111
                      registration_type: "in-person"
                      first_name: "John"
                      last_name: "Doe"
                      barcode: "111111111"
                      phone: "1111111111"
                      email: "john.doe@example.com"
                      registered_date: "2024-04-19T23:31:23-05:00"
                      attendance: "yes"
                    - booking_id: 222222
                      registration_type: "online"
                      first_name: "Jane"
                      last_name: "Doe"
                      barcode: "222222222"
                      phone: "2222222222"
                      email: "jane.doe@example.com"
                      registered_date: "2024-04-19T23:31:23-05:00"
                      attendance: "no"
                  waitlist:
                    - booking_id: 333333
                      registration_type: "in-person"
                      first_name: "Baby"
                      last_name: "Doe"
                      barcode: "333333333"
                      phone: "3333333333"
                      email: "baby.doe@example.com"
                      registered_date: "2024-04-19T21:31:23-05:00"
                      attendance: "-"
                - event_id: 56
                  registrants: [ ]
                  waitlist: [ ]
                - event_id: 57
                  registrants: [ ]
                  waitlist: [ ]
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: Invalid event ids.
                  value: Invalid event ID list. The IDs should be numeric and separated by a comma.
  /events/form/{id}:
    get:
      tags:
        - Events
      summary: Returns the details of an Event registration form.
      parameters:
        - name: id
          in: path
          description: 'A form id or comma-separated list of form ids to retrieve. 
          A limit of 100 form ids can be retrieved.'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              examples:
                example1:
                  summary: Successful response.
                  value:
                    - id: 611
                      name: "Student Form"
                      identityHelp: ""
                      emailMethod:
                        status: "required"
                        label: "Email"
                        help: ""
                      phoneMethod:
                        status: "enabled"
                        label: "Phone Number"
                        help: ""
                      barcodeMethod:
                        status: "disabled"
                        label: "Library Barcode"
                        help: ""
                      questions:
                        - id: 1219
                          label: "Are you a current student?"
                          type: "radio"
                          required: true
                          options:
                            - Yes
                              No
                        - id: 1220
                          label: "Leave a comment (optional)"
                          type: "string"
                          required: false
                example2:
                  summary: Successful response with invalid form id..
                  value:
                    - id: 1
                      error: Form not found.
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: No form id provided.
                  value: form id required
                example2:
                  summary: Too many form ids provided.
                  value: too many form ids requested
  /event_search:
    get:
      tags:
        - Events
      summary: Search for events in your system.
      parameters:
        - name: search
          in: query
          description: 'The text you wish to search for. 
          The event title and description are searched.'
          required: true
          schema:
            type: string
        - name: cal_id
          in: query
          description: 'The calendar ID you wish to return data from.'
          required: false
          schema:
            type: integer
        - name: date
          in: query
          description: 'The starting date to retrieve events. 
          Can accept dates from the past.<br>Format: YYYY-MM-DD.'
          required: false
          schema:
            type: string
            format: date
            default: <Today's Date>
        - name: limit
          in: query
          description: 'Limit the number of events to return.<br>Range: 1-100.'
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: campus
          in: query
          description: 'Filter events based on a Campus Id, or a comma-separated list of Campus Ids. 
          (Your Campus label is set as: "Campus").'
          required: false
          schema:
            type: integer
        - name: category
          in: query
          description: 'Filter events based on a Category Id, or a comma-separated list of Category Ids.'
          required: false
          schema:
            type: integer
        - name: audience
          in: query
          description: 'Filter events based on Audience Id, or a comma-separated list of Audience Ids.'
          required: false
          schema:
            type: integer
        - name: tag
          in: query
          description: 'Filter events based on Internal Tag Id, or a comma-separated list of Internal Tag Ids.'
          required: false
          schema:
            type: integer
        - name: registration_type
          in: query
          description: 'Filter events based on registration type. 
          Options are "in-person", "online" and "both", for events that have both registration types.'
          required: false
          schema:
            type: string
        - name: location
          in: query
          description: "Filter events based on Location Id or a comma-separated list of Location Ids."
          required: false
          schema:
            type: integer
        - name: location_type
          in: query
          description: "Filter events based on Location Type's."
          required: false
          schema:
            type: integer
        - name: event_note
          in: query
          description: 'Option to return the event note.<br>
          Options: 0 or 1.'
          required: false
          schema:
            type: integer
            default: 0
        - name: internal_notes
          in: query
          description: 'Option to return the internal notes.<br>
          Options: 0 or 1.'
          required: false
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: 'Successful operation<br>
          Note: Registrations for an event are currently open if "has_registration_opened" is true and "has_registration_closed" is false.
The "attendance" array will only be present if either an in-person or online actual attendance value is set.
If a particular actual attendance value is not set, it will appear in the result as an empty string.'
          content:
            application/json:
              example:
                - id: 86121
                  title: "Friday night drinks!!"
                  allday: false
                  start: "2024-04-19T16:00:00+11:00"
                  end: "2024-04-22T20:00:00+11:00"
                  description: "Friday night social drinks!"
                  url:
                    public: "https://example.libcal.com/event/86121"
                    admin: "https://example.libcal.com/aevent.php?c=89&m=edit&event_id=86121"
                  location:
                    id: 1094
                    name: "Conference Room"
                  campus:
                    id: 45
                    name: "Melbourne"
                  audience:
                    - id: 7
                      name: "Teens"
                  category:
                    - id: 31
                      name: "Staff"
                    - id: 34
                      name: "Casuals"
                  owner:
                    id: 3465
                    name: "John Smith"
                  presenter: ""
                  featured_image: ""
                  future_dates:
                    - event_id: 86122
                      start: "2024-04-19T16:00:00+11:00"
                  calendar:
                    id: 89
                    name: "Staff Planner"
                    public: "https://example.libcal.com/calendar/staff"
                    admin: "https://example.libcal.com/admin/calendar/89"
                  registration: true
                  registration_form_id: 0
                  registration_series_linked: true
                  has_registration_opened: true
                  has_registration_closed: false
                  seats: 20
                  seats_taken: 15
                  physical_seats: 0
                  physical_seats_taken: 0
                  online_seats: 20
                  online_seats_taken: 15
                  wait_list: false
                  color: "#14C762"
                  registration_cost: "10.50"
                  attendance:
                    in_person: 22
                    online: ""
                  more_info: ""
                  setup_time: 0
                  teardown_time: 0
                  online_user_id: 0
                  zoom_email: ""
                  online_meeting_id: ""
                  online_host_url: ""
                  online_join_url: "https://url.com"
                  online_join_password: "pw"
                  online_provider: "external"
                  event_note: "event note"
                  internal_notes:
                    - "internal note 1"
                    - "internal note 2"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: No search term provided.
                  value: no search term provided
                example2:
                  summary: Date not valid.
                  value: Invalid Date.
  /events/{id}/register:
    post:
      tags:
        - Events
      summary: Book a registration for an event.
      parameters:
        - name: id
          in: path
          description: 'The event id for the event that is adding a registration.'
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                registration_type:
                  description: "Registration type is required and can be either \"in-person\" or \"online\" depending on the event's available registration types."
                  type: string
                form:
                  description: Registration form values required for event registration.
                  type: object
                  properties:
                    first_name:
                      type: string
                    last_name:
                      type: string
                    email:
                      type: string
                    phone:
                      type: string
                    barcode:
                      type: string
                    questions:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                          answer:
                            type: string
                seats:
                  description: 'The number of seats to book, if the event allows multiple seats per registration. 
                  Maximum of 10 seats. 
                  Range 1-10.'
                  type: integer
                  default: 1
                waitlist:
                  description: 'Set to 1 to register for the waitlist if registrations are full and the event allows waitlist registrations. 
                  Value must be 1 or 0.'
                  type: integer
                  default: 0
                no_email:
                  description: 'Set to 1 if the patron should not receive a confirmation email for their booking.
                  Value must be 1 or 0.'
                  type: integer
                  default: 0
              required:
                - registration_type
                - form
            example:
              seats: 1
              waitlist: 0
              no_email: 0
              registration_type: "in-person"
              form:
                first_name: "John"
                last_name: "Smith"
                email: "john@example.com"
                phone: "5555355555"
                barcode: "234232234234"
                questions:
                  - id: 1159
                    answer: "Option A"
                  - id: 1170
                    answer: "Student"
                  - id: 1178
                    answer: "4"
      responses:
        200:
          description: 'Successful operation<br>
Note: "is_waitlist" is true if the patron was added to the waitlist instead of registering for the event.
Waitlist registrations show the event cost but will only be charged if moved off of the waitlist.'
          content:
            application/json:
              example:
                - event_id: 6824
                  booking_id: 2443
                  registration_type: "online"
                  is_waitlist: false
                  total_cost: 19.99
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: Unable to decode post body payload json.
                  value: json syntax error
                example2:
                  summary: Registration type must match event's.
                  value: a valid registration type must be passed
                example3:
                  summary: Number of requested seats must be at least 1.
                  value: must register for at least 1 seat
                example4:
                  summary: Seats requested exceed registration maximum.
                  value: requested seats exceeds the maximum allowed per registration
                example5:
                  summary: Invalid event id provided.
                  value: invalid event id
                example6:
                  summary: Unable to load event information.
                  value: error loading event
                example7:
                  summary: Physical registration are not enabled for this event.
                  value: in-person registrations are not enabled for this event
                example8:
                  summary: Online registrations are not enabled for this event.
                  value: online registrations are not enabled for this event
                example9:
                  summary: Registration period has yet to open.
                  value: registrations are not yet open for this event
                example10:
                  summary: Registration period has already closed.
                  value: registrations have closed for this event
                example11:
                  summary: Event prohibits requests booking multiple seats at once.
                  value: event does not allow multiple seats per booking
                example12:
                  summary: Invalid form id provided.
                  value: invalid form id
                example13:
                  summary: Error response when form values are invalid or incomplete.
                  value: invalid or incomplete required form field
                example14:
                  summary: Error response when required form answers are missing.
                  value: 'missing required question ids: 1, 3, 4'
                example15:
                  summary: Error response when registrant email is banned.
                  value: Ge_EmailBanned
                example16:
                  summary: Error response when registrant email is already registerd for the event.
                  value: ev_AlreadyRegistered
                example17:
                  summary: Registration is full for the event.
                  value: Ge_Full
                example18:
                  summary: Registration is full for the event, but waitlist is available.
                  value: registrations are full but a waitlist is available
                example19:
                  summary: Booking queue for the event is busy.
                  value: ev_BookingQueueBusy
                example20:
                  summary: Unable to make registration for this event.
                  value: registration attempt failed
  /events/{id}/cancel/{booking_id}:
    post:
      tags:
        - Events
      summary: Cancel an event reservation.
      parameters:
        - name: id
          in: path
          description: 'The id for the event that has the registration to be cancelled.'
          required: true
          schema:
            type: integer
        - name: booking_id
          in: path
          description: 'The booking id for the registration to be cancelled.'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              example:
                - event_id: 266
                  booking_id: 732
                  cancelled: true
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: Invalid event id provided.
                  value: invalid event id
                example2:
                  summary: Invalid booking id provided.
                  value: invalid booking id
                example3:
                  summary: Invalid booking id provided for given event.
                  value: booking id not associated with event id
                example4:
                  summary: Error response when unable to cancel.
                  value: Unable to process action at this time. Please try again later.
  /space/locations:
    get:
      tags:
        - Spaces / Seats
      summary: Returns a list of public and private space/seat locations from your system.
      parameters:
        - name: details
          in: query
          description: 'Flag to indicate you want additional details about each location.'
          required: false
          schema:
            type: integer
            default: 0
        - name: admin_only
          in: query
          description: 'Flag to indicate you want admin-only locations included in your request.'
          required: false
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              example:
                - lid: 33
                  name: "Main Campus"
                  public: 1
                  formid: 38
                  admin_only: 0
                - lid: 34
                  name: "Second Campus"
                  public: 0
                  admin_only: 1
  /space/form/{id}:
    get:
      tags:
        - Spaces / Seats
      summary: Returns the details of a space/seat booking form.
      parameters:
        - name: id
          in: path
          description: 'A form id or comma-separated list of form ids to retrieve.'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              example:
                - id: 38
                  name: "Simple Form"
                  fields:
                    fname:
                      label: "First Name"
                      type: "string"
                      required: true
                    lname:
                      label: "Last Name"
                      type: "string"
                      required: true
                    email:
                      label: "Email"
                      type: "string"
                      required: true
                    q43:
                      id: 43
                      label: "Which is your favorite flavor of ice-cream?"
                      type: "dropdown"
                      required: false
                      options:
                        - Vanilla
                        - Strawberry
                        - Chocolate
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: No form ids provided
                  value: must supply at least 1 form id
  /space/question/{id}:
    get:
      tags:
        - Spaces / Seats
      summary: Returns the details of space/seat booking form questions.
      parameters:
        - name: id
          in: path
          description: 'A question id or comma-separated list of question ids to retrieve.'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              example:
                - id: 43
                  label: "Which is your favorite flavor of ice-cream?"
                  type: "dropdown"
                  required: false
                  options:
                    - Vanilla
                    - Strawberry
                    - Chocolate
                - id: 8
                  label: "Any additional comments for this booking."
                  type: "string"
                  required: false
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: No question ids provided
                  value: must supply at least 1 question id
  /space/categories/{id}:
    get:
      tags:
        - Spaces / Seats
      summary: Returns a list of space/seat categories for locations in your system.
      parameters:
        - name: id
          in: path
          description: 'A location id or comma-separated list of location ids to retrieve.'
          required: true
          schema:
            type: integer
        - name: admin_only
          in: query
          description: 'Flag to indicate you want admin-only categories included in your request.'
          required: false
          schema:
            type: integer
            default: 0
        - name: details
          in: query
          description: 'Flag to indicate you want additional details about each category.'
          required: false
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - lid: 33
                  name: "Main Campus"
                  categories:
                    - cid: 58
                      name: "Study Rooms"
                      formid: 12
                      public: 1
                      google: true
                      admin_only: 0
                      termsAndConditions: "T&C's"
                      description: "Study Rooms Description"
                    - cid: 59
                      name: "Private Room"
                      formid: 14
                      public: 0
                      google: false
                      admin_only: 0
                      termsAndConditions: "T&C's"
                      description: "Private Room description"
                    - cid: 60
                      name: "Admin Only Room"
                      formid: 15
                      public: 0
                      google: false
                      admin_only: 1
                      termsAndConditions: "T&C's"
                      description: "Admin Only Room description"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: No location ids provided.
                  value: must supply at least 1 location id
  /space/category/{id}:
    get:
      tags:
        - Spaces / Seats
      summary: Returns information about space/seat categories in your system.
      parameters:
        - name: id
          in: path
          description: 'A category id or comma-separated list of category ids to retrieve.'
          required: true
          schema:
            type: integer
        - name: details
          in: query
          description: 'Flag to indicate you want additional details about each space.<br>
          Note: This should only be used for systems that do not contain thousands of spaces.'
          required: false
          schema:
            type: integer
            default: 0
        - name: admin_only
          in: query
          description: 'Flag to indicate you want admin-only categories included in your request.'
          required: false
          schema:
            type: integer
            default: 0
        - name: availability
          in: query
          description: 'Either a single date, or a comma separated list of 2 dates (a start and end date, max range of 31 days).
The keyword "next" can be used to return availability for the first date that any of the matching resources are available.
The keyword "next_only" can be used to return availability for the next date that each individual resource is available. 
This will only return the first timeslot that each resource is available for. Also note that this method only searches up to 10 days ahead of the current date.
Note: Setting this value also sets the details value to true.<br>Format: YYYY-MM-DD.'
          required: false
          schema:
            type: string
            format: date
            default: <Today's Date>
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              examples:
                example1:
                  summary: Successful response.
                  value:
                    - cid: 58
                      name: Study Rooms
                      formid: 14
                      public: 1
                      admin_only: 0
                      google: true
                      items:
                        - 475
                        - 211
                example2:
                  summary: Successful response with additional details.
                  value:
                    - cid: 58
                      name: "Study Rooms"
                      formid: 14
                      public: 1
                      admin_only: 0
                      google: true
                      termsAndConditions: "T&C's"
                      description: "Study Rooms description"
                      items:
                        - id: 475
                          name: "Study Room 1"
                          description: "A place for quiet study."
                          image: "https://libapps.s3.amazonaws.com/path/to/images/study_room.jpg"
                          capacity: 4
                          formid: 14
                          isBookableAsWhole: true
                          isEventLocation: true
                          zoneId: 60
                          google: false
                          exchange: true
                          exchangeResource: "studyRoom1@exchange.com"
                          filter_ids:
                            - 8287
                            - 9176
                        - id: 211
                          name: "Study Room 2"
                          description: "A place for quiet study."
                          image: "https://libapps.s3.amazonaws.com/path/to/images/study_room_2.jpg"
                          capacity: 20
                          formid: 16
                          isBookableAsWhole: true
                          isEventLocation: false
                          zoneId: 61
                          google: false
                          exchange: true
                          exchangeResource: "studyRoom2@exchange.com"
                          filter_ids: [ ]
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: No category ids provided.
                  value: must supply at least 1 category id
  /space/item/{id}:
    get:
      tags:
        - Spaces / Seats
      summary: Returns information + availability details of a space in your system.
      parameters:
        - name: id
          in: path
          description: 'A space id or comma-separated list of space ids to retrieve.'
          required: true
          schema:
            type: integer
        - name: availability
          in: query
          description: 'Either a single date, or a comma separated list of 2 dates (a start and end date, max range of 31 days).
The keyword "next" can be used to return availability for the next date that this resource is available.
The keyword "next_only" can be used to return availability for the next date that this resource is available. 
This will only return the first timeslot that the resource is available for. 
Also note that this method only searches up to 10 days ahead of the current date<br>Format: YYYY-MM-DD.'
          required: false
          schema:
            type: string
            format: date
            default: <Today's Date>
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - id: 469
                  name: "Study Room 1"
                  description: "A place for quiet study."
                  image: "https://libapps.s3.amazonaws.com/path/to/images/study_room.jpg"
                  capacity: 4
                  formid: 14
                  isBookableAsWhole: true
                  isEventLocation: true
                  zoneId: 60
                  google: true
                  exchange: false
                  filter_ids:
                    - 8287
                    - 9176
                  availability:
                    - from: "2024-04-22T14:00:00+11:00"
                      to: "2024-04-22T14:30:00+11:00"
                    - from: "2024-04-22T14:30:00+11:00"
                      to: "2024-04-22T15:00:00+11:00"
                    - from: "2024-04-22T15:00:00+11:00"
                      to: "2024-04-22T15:30:00+11:00"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: No item ids provided.
                  value: must supply at least 1 item id
  /space/items/{id}:
    get:
      tags:
        - Spaces / Seats
      summary: Returns information + availability details of spaces in your system.
      parameters:
        - name: id
          in: path
          description: 'The location id to retrieve.'
          required: true
          schema:
            type: integer
        - name: category_id
          in: query
          description: 'Pass a category id to only show spaces from this category.'
          required: false
          schema:
            type: integer
        - name: visibility
          in: query
          description: 'If you provide a "category_id" then this option is ignored and all items for the "category_id" will be returned.
If you provide "private" for this option then items from both public and private categories will be returned.<br>
If you provide "admin_only" for this option then all items for the location will be returned.<br>
Options: public, private, admin_only.'
          required: false
          schema:
            type: string
            default: public
        - name: zone_id
          in: query
          description: 'Pass a zone id to only show details for this zone.'
          required: false
          schema:
            type: integer
        - name: bookable
          in: query
          description: 'Pass a Bookable As Whole only flag to only return Bookable As Whole spaces.<br>
          Options: 0 or 1.'
          required: false
          schema:
            type: integer
            default: 0
        - name: filters
          in: query
          description: 'An array of search filter ids. 
          If multiple are provided then resources matching any of the search filters will be returned.'
          required: false
          schema:
            type: array
            items:
              type: integer
        - name: availability
          in: query
          description: 'Either a single date, or a comma separated list of 2 dates (a start and end date, max range of 31 days).<br>
The keyword "next" can be used to return availability for the first date that any of the matching resources are available.<br>
The keyword "next_only" can be used to return availability for the next date that each individual resource is available. 
This will only return the first timeslot that each resource is available for. 
Also note that this method only searches up to 10 days ahead of the current date.<br>Format: YYYY-MM-DD.'
          required: false
          schema:
            type: string
            format: date
            default: <Today's Date>
        - name: page_index
          in: query
          description: 'For results pagination, this sets which page to retrieve (starting at 0 for the first page).'
          required: false
          schema:
            type: integer
            default: 0
        - name: page_size
          in: query
          description: 'For results pagination, this sets how many results per page to retrieve.<br>Range: 1-100.'
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - id: 123
                  name: "Study Room #1"
                  description: "The Study Room near the main entrance of the library."
                  termsAndConditions: "Study Room #1 terms and conditions"
                  image: "https://libapps.s3.amazonaws.com/path/to/images/seat.jpg"
                  capacity: 20
                  formid: 12
                  isBookableAsWhole: true
                  isEventLocation: true
                  google: false
                  exchange: true
                  filter_ids:
                    - 8287
                    - 9176
                  zoneId: 233
                  zoneName: "West Wing"
                  groupId: 976
                  groupName: "Study Room Category"
                  groupTermsAndConditions: "Study Room Category terms and conditions"
                  locationTermsAndConditions: "Location 45 terms and conditions"
                  availability:
                    - from: "2024-04-22T14:00:00+11:00"
                      to: "2024-04-22T14:30:00+11:00"
                    - from: "2024-04-22T14:30:00+11:00"
                      to: "2024-04-22T15:00:00+11:00"
                    - from: "2024-04-22T15:00:00+11:00"
                      to: "2024-04-22T15:30:00+11:00"
                - id: 546
                  name: "Study Room 2"
                  description: "The Study Room near the back entrance of the library."
                  termsAndConditions: "Study Room #2 terms and conditions"
                  image: "https://libapps.s3.amazonaws.com/path/to/images/seat.jpg"
                  capacity: 20
                  formid: 12
                  isBookableAsWhole: true
                  isEventLocation: false
                  google: true
                  exchange: false
                  filter_ids: [ ]
                  zoneId: 233
                  zoneName: "East Wing"
                  groupId: 976
                  groupName: "Study Room Category"
                  groupTermsAndConditions: "Study Room Category terms and conditions"
                  locationTermsAndConditions: "Location 45 terms and conditions"
                  availability:
                    - from: "2024-04-22T14:00:00+11:00"
                      to: "2024-04-22T14:30:00+11:00"
                    - from: "2024-04-22T15:00:00+11:00"
                      to: "2024-04-22T15:30:00+11:00"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: No items match the filters.
                  value: No resources matching the filters.
  /space/reserve:
    post:
      tags:
        - Spaces / Seats
      summary: Book spaces/seats in your system.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                start:
                  description: Booking start date/time in ISO8601 format.
                  type: string
                fname:
                  description: First name of person making the booking.
                  type: string
                lname:
                  description: Last name of person making the booking.
                  type: string
                email:
                  description: Email address of person making the booking.
                  type: string
                account:
                  description: 'The account identifier for the patron. 
                  This will default to the email address if not included. 
                  When using LibAuth, set this to the patrons username/login/barcode.'
                  type: string
                  default: email
                barcode:
                  description: "Library ID/barcode for Pickup Manager.<br>
                  Required if the space's location is set for curbside pickup."
                  type: string
                phone:
                  description: "SMS phone number for Pickup Manager.
  Required if the space's location is set for curbside pickup."
                  type: string
                bookings:
                  description: 'List of bookings to make, each element contains:<br>
1. id: The space to book.<br>
2. seat_id: The seat to book. (If booking a seat this is required, omit otherwise).<br>
3. to: The date/time to book the item until in ISO8601 format.'
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                      seat_id:
                        type: integer
                      to:
                        type: string
                custom form question ids:
                  description: 'The answers to any custom booking form questions (returned from /space_form request).
Note that some custom form questions can be marked as requiring an answer, in this case the booking will fail if an answer is not provided.'
                  type: string
                nickname:
                  description: 'If your space has "Public Nicknames" enabled, then supply the Nickname field via this parameter.'
                  type: string
                cost:
                  description: 'Provide a value to override the cost of the reservation, otherwise the cost will be determined from the billing rules. 
                  If a value of 0.0 is provided, the booking will have no charge.'
                  type: number
                adminbooking:
                  description: 'A flag to indicate if this is an admin booking. 
                  Admin bookings are exempt from patron booking rules such as daily limits, booking window limits, booking duration limits, mediation, available hours, etc.<br>
                  Value must be 1 or 0.'
                  type: number
                  default: 0
                test:
                  description: 'A flag to indicate if this is a test booking. 
                  If this flag is set the system will process the booking rules but not actually make the booking. 
                  This is a useful feature when developing an application that makes use of the booking API.
                  Value must be 1 or 0.'
                  type: number
                  default: 0
              required:
                - start
                - fname
                - lname
                - email
                - bookings
            example:
              start: '2023-07-15'
              fname: John
              lname: Smith
              email: 'john@example.com'
              q8: Question 8 Answer
              q4: Question 4 Answer
              q5:
                - Infinity War
                - Endgame
              bookings:
                - id: 53
                  to: '2024-07-15'
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - booking_id: mdZm15
                  cost: 7.55
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: No post body payload provided.
                  value: no data provided
                example2:
                  summary: Unable to decode post body payload json.
                  value: json syntax error
                example3:
                  summary: Error response when the data can be parsed, but multiple common values are invalid.
                  value: 'must supply start date for bookings
must supply first name of booking user
must supply last name of booking user
must supply email of booking user
must supply at least one booking'
                example4:
                  summary: Error response when the data can be parsed, but multiple booking details are invalid.
                  value: "booking 0 does not contain a valid item id or seat id
booking 1 does not contain a 'to' date
booking 2 'to' datetime is invalid
booking 3 'to' datetime must be after the booking 'start' datetime
booking 4 end date is in the past
booking 5 item location does not match item location of booking 0
booking 6 'from' is not a valid starting slot
booking 7 'to' is not a valid ending slot"
  /space/booking/{id}:
    get:
      tags:
        - Spaces / Seats
      summary: Returns information about specific bookings in your system. Cancelled bookings do not return data.
      parameters:
        - name: id
          in: path
          description: 'A booking id or comma-separated list of booking ids to retrieve. 
          Cancelled bookings do not return data.'
          required: true
          schema:
            type: string
        - name: form_answers
          in: query
          description: 'Flag to indicate if you want custom form answers to be returned.'
          required: false
          schema:
            type: integer
            default: 0
        - name: check_in_status
          in: query
          description: 'Flag to indicate if you want check-in status for the space(s) requested.'
          required: false
          schema:
            type: integer
            default: 0
        - name: internal_notes
          in: query
          description: 'Flag to indicate if you want internal notes to be returned.'
          required: false
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: 'Successful operation.<br>
          Note: The "seat_id" and "seat_name" fields will only be set for seat bookings.'
          content:
            application/json:
              example:
                - bookId: "mdZm15"
                  id: 23657
                  eid: 44
                  cid: 37
                  lid: 12
                  fromDate: "2024-04-22T10:00:00+11:00"
                  toDate: "2024-04-22T11:00:00+11:00"
                  created: "2024-04-20T05:23:19+11:00"
                  firstName: "John"
                  lastName: "Patron"
                  email: "john.patron@somewhere.com"
                  account: "jpatron"
                  status: "Confirmed"
                  location_name: "Main Campus"
                  category_name: "Study Rooms"
                  item_name: "Study Room 1"
                  event:
                    id: 4186095
                    title: "Study Session"
                  nickname: "Study Group"
                  check_in_code: "ABC"
                  q43: "patron answer"
                  q44: "patron answer 2"
                  q45: "patron answer 3"
                  check_in_status: "in"
                  internal_notes:
                    - name: "Smith"
                      created: "2024-04-22"
                      note: "note"
                    - name: "Jacob"
                      created: "2024-04-22"
                      note: "note1"
                - bookId: "Xrt5jt"
                  id: 23657
                  eid: 334
                  cid: 42
                  lid: 14
                  fromDate: "2024-04-22T10:30:00+11:00"
                  toDate: "2024-04-22T12:30:00+11:00"
                  created: "2024-04-20T08:32:11+11:00"
                  firstName: "Gary"
                  lastName: "Student"
                  email: "gary.student@somewhere.com"
                  account: "gstudent"
                  status: "Confirmed"
                  location_name: "Main Campus"
                  category_name: "Computer Lab"
                  item_name: "PC Computer Lab"
                  event:
                    id: 4180195
                    title: "Computer Group Meeting"
                  nickname: ""
                  seat_id: 72
                  seat_name: "PC Computer Lab Seat 4"
                  check_in_code: "DEF"
                  q43: "patron answer"
                  check_in_status: "-"
                  internal_notes:
                    - name: "John"
                      created: "2024-04-22"
                      note: "note"
                    - name: "Jane"
                      created: "2024-04-22"
                      note: "note1"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: No booking ids provided.
                  value: must supply at least 1 booking id
  /space/bookings:
    get:
      tags:
        - Spaces / Seats
      summary: Returns a list of bookings in your system.
      parameters:
        - name: eid
          in: query
          description: 'Pass an item id or a comma-separated list of item ids here to only show bookings for those spaces.'
          required: false
          schema:
            type: integer
        - name: seat_id
          in: query
          description: 'Pass a seat id or a comma-separated list of seat ids here to only show bookings for those seats.'
          required: false
          schema:
            type: integer
        - name: cid
          in: query
          description: 'Pass a category id or list of category ids here to only show bookings for those categories.'
          required: false
          schema:
            type: integer
        - name: lid
          in: query
          description: 'Pass a location id here to only show bookings for that location.'
          required: false
          schema:
            type: integer
        - name: email
          in: query
          description: 'Pass an email address to only show bookings made by that patron.'
          required: false
          schema:
            type: string
        - name: date
          in: query
          description: 'The date to retrieve bookings. Dates in the past are ignored.<br>
          Format: YYYY-MM-DD.'
          required: false
          schema:
            type: string
            format: date
            default: <Today's Date>
        - name: days
          in: query
          description: 'The number of days into the future to retrieve bookings from, starting from [date] parameter.<br>
          Range: 0-365.'
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
            maximum: 365
        - name: limit
          in: query
          description: 'How many bookings to return per page. 
          If your request returns the same number of results as this "limit" value, you should request another "page" of results.'
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 500
        - name: page
          in: query
          description: 'Which page of results to return. 1 for first page, 2 for second page, etc.'
          required: false
          schema:
            type: integer
            default: 1
        - name: form_answers
          in: query
          description: 'Flag to indicate if you want custom form answers to be returned. 
          You can hit the /equipment/question endpoint to retrieve the details of the booking form questions.'
          required: false
          schema:
            type: integer
            default: 0
        - name: check_in_status
          in: query
          description: 'Flag to indicate if you want check-in status for the space(s) requested.'
          required: false
          schema:
            type: integer
            default: 0
        - name: internal_notes
          in: query
          description: 'Flag to indicate if you want internal notes to be returned.'
          required: false
          schema:
            type: boolean
            default: false
        - name: include_tentative
          in: query
          description: 'Flag to include tentative and mediated tentative bookings'
          required: false
          schema:
            type: boolean
            default: 1
        - name: include_cancel
          in: query
          description: 'Flag to include canceled bookings'
          required: false
          schema:
            type: boolean
            default: 1
        - name: include_remote
          in: query
          description: 'Flag to include integration bookings such as Outlook & Google Sync bookings'
          required: false
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - bookId: "mdZm15"
                  id: 23657
                  eid: 44
                  cid: 37
                  lid: 12
                  fromDate: "2024-04-22T10:00:00+11:00"
                  toDate: "2024-04-22T11:00:00+11:00"
                  created: "2024-04-20T05:23:19+11:00"
                  firstName: "John"
                  lastName: "Patron"
                  email: "john.patron@somewhere.com"
                  account: "jpatron"
                  status: "Confirmed"
                  location_name: "Main Campus"
                  category_name: "Study Rooms"
                  item_name: "Study Room 1"
                  event:
                    id: 4186095
                    title: "Study Session"
                  nickname: "Study Group"
                  check_in_code: "ABC"
                  q43: "patron answer"
                  q44: "patron answer 2"
                  check_in_status: "-"
                  internal_notes:
                    - name: "John"
                      created: "2024-04-22"
                      note: "note"
                    - name: "Jane"
                      created: "2024-04-22"
                      note: "note1"
                - bookId: "cskEDUqA"
                  id: 26535
                  eid: 38
                  cid: 37
                  lid: 12
                  fromDate: "2024-04-22T10:30:00+11:00"
                  toDate: "2024-04-22T12:30:00+11:00"
                  created: "2024-04-20T08:32:11+11:00"
                  firstName: "Gary"
                  lastName: "Student"
                  email: "gary.student@somewhere.com"
                  account: "gstudent"
                  status: "Confirmed"
                  location_name: "Main Campus"
                  category_name: "Computer Lab"
                  item_name: "PC Computer Lab"
                  event: null
                  seat_id: 962
                  seat_name: "PC Computer Lab Seat 4"
                  check_in_code: "DEF"
                  q43: "patron answer"
                  check_in_status: "out"
                  internal_notes:
                    - name: "Jacob"
                      created: "2024-04-22"
                      note: "note"
                    - name: "Jill"
                      created: "2024-04-22"
                      note: "note1"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: Invalid date provided.
                  value: invalid "date" value
                example2:
                  summary: Invalid page provided.
                  value: invalid "page" value, must be >= 1
  /space/bookings/updates:
    get:
      tags:
        - Spaces / Seats
      summary: Returns bookings that have been created or changed since the given datetime.
      parameters:
        - name: date
          in: query
          description: 'The datetime to retrieve updates since. Must be within the past 24 hours<br>
          Format: YYYY-MM-DD HH:mm:SS.'
          required: true
          schema:
            type: string
            format: date
            default: <Today's Date>
        - name: lid
          in: query
          description: 'Only return results for the location with the given id'
          required: false
          schema:
            type: integer
        - name: gid
          in: query
          description: 'Only return results for the group with the given id'
          required: false
          schema:
            type: integer
        - name: eid
          in: query
          description: 'Only return results for the space with the given id'
          required: false
          schema:
            type: integer
        - name: internal_notes
          in: query
          description: 'Flag to indicate if you want internal notes to be returned.'
          required: false
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - bookId: "mdZm15"
                  id: 23657
                  eid: 44
                  cid: 37
                  lid: 12
                  fromDate: "2024-04-22T10:00:00+11:00"
                  toDate: "2024-04-22T11:00:00+11:00"
                  created: "2024-04-20T05:23:19+11:00"
                  firstName: "John"
                  lastName: "Patron"
                  email: "john.patron@somewhere.com"
                  account: "jpatron"
                  status: "Confirmed"
                  location_name: "Main Campus"
                  category_name: "Study Rooms"
                  item_name: "Study Room 1"
                  event:
                    id: 4186095
                    title: "Study Session"
                  nickname: "Study Group"
                  check_in_code: "ABC"
                  check_in_status: "-"
                  internal_notes:
                    - name: "John"
                      created: "2024-04-22"
                      note: "note"
                    - name: "Jane"
                      created: "2024-04-22"
                      note: "note1"
                - bookId: "cskEDUqA"
                  id: 26535
                  eid: 38
                  cid: 37
                  lid: 12
                  fromDate: "2024-04-22T10:30:00+11:00"
                  toDate: "2024-04-22T12:30:00+11:00"
                  created: "2024-04-20T08:32:11+11:00"
                  firstName: "Gary"
                  lastName: "Student"
                  email: "gary.student@somewhere.com"
                  account: "gstudent"
                  status: "Confirmed"
                  location_name: "Main Campus"
                  category_name: "Computer Lab"
                  item_name: "PC Computer Lab"
                  event: null
                  seat_id: 962
                  seat_name: "PC Computer Lab Seat 4"
                  check_in_code: "DEF"
                  check_in_status: "out"
                  internal_notes:
                    - name: "Jacob"
                      created: "2024-04-22"
                      note: "note"
                    - name: "Jill"
                      created: "2024-04-22"
                      note: "note1"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: Invalid date provided.
                  value: Invalid Date.
                example2:
                  summary: Invalid location, group, or space id provided.
                  value: Invalid ID.
  /space/cancel/{id}:
    post:
      tags:
        - Spaces / Seats
      summary: Cancel a space/seat booking.
      parameters:
        - name: id
          in: path
          description: 'A booking id or comma-separated list of booking ids to cancel.'
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - booking_id: "mdZm15"
                  cancelled: true
                - booking_id: "jXrm31"
                  cancelled: false
                  error: "invalid booking id"
                - booking_id: "KLx3m2"
                  cancelled: false
                  error: "unable to cancel booking, is in the past or was never confirmed"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: No booking ids provided.
                  value: must supply at least 1 booking id
  /space/nickname/{id}:
    get:
      tags:
        - Spaces / Seats
      summary: Returns spaces/seats confirmed bookings, returning the Public Nicknames for a given date.
      parameters:
        - name: id
          in: path
          description: 'A category id or comma-separated list of category ids to retrieve.'
          required: true
          schema:
            type: integer
        - name: date
          in: query
          description: 'The date to retrieve bookings. Dates in the past are ignored.<br>
          Format: YYYY-MM-DD.'
          required: false
          schema:
            type: string
            format: date
            default: <Today's Date>
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - categories:
                    - cid: 69
                      name: "Group Study Rooms"
                      nickname_label: "Booking Label"
                      spaces:
                        - id: 233
                          name: "Group Study Room 101"
                          bookings:
                            - nickname: "Law 101 Tutorial Group"
                              start: "2024-04-22T11:00:00+11:00"
                              end: "2024-04-22T12:00:00+11:00"
                              created: "2024-04-20T10:54:23+11:00"
                              booking_id: "_L4oMxm"
                            - nickname: "Accounting 204 Planning"
                              start: "2024-04-22T12:00:00+11:00"
                              end: "2024-04-22T13:00:00+11:00"
                              created: "2024-04-12T07:32:45+11:00"
                              booking_id: "_FjoDew"
                        - id: 245
                          name: "Group Study Room 102"
                          bookings:
                            - nickname: "Mick's Physics Research Group"
                              start: "2024-04-22T14:00:00+11:00"
                              end: "2024-04-22T15:30:00+11:00"
                              created: "2024-04-20T02:18:09+11:00"
                              booking_id: "_QdoOxm"
                    - cid: 87,
                      error: "invalid category"
                    - cid: 87,
                      error: "public nicknames are not enabled for this category"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: No category ids provided.
                  value: must supply at least 1 category id
  /space/utilization/{id}:
    get:
      tags:
        - Spaces / Seats
      summary: Returns current spaces utilization and occupancy data in your system.
      parameters:
        - name: id
          in: path
          description: 'The location id to retrieve.'
          required: true
          schema:
            type: integer
        - name: category_id
          in: query
          description: 'Pass a category id to only show utilization for that category.'
          required: false
          schema:
            type: integer
        - name: zone_id
          in: query
          description: 'Pass a zone id here to only show utilization for that zone.'
          required: false
          schema:
            type: integer
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - seatSummary:
                    active: 0
                    bookableCount: 0
                    totalCount: 0
                - spaceSummary:
                    active: 2
                    bookableCount: 2
                    totalCount: 2
                - zones:
                    id: 87
                    name: "West Wing Zone"
                    spaces:
                      - id: 4139
                        name: "Computer Lab"
                        bookableAsWhole: true
                        currentOccupancy: 1
                        currentCapacity: 1
                        maxCapacity: 1
                      - id: 4148
                        name: "Mac Computer Lab"
                        bookableAsWhole: true
                        currentOccupancy: 1
                        currentCapacity: 1
                        maxCapacity: 1
                - date: "2024-04-22T11:21:59+11:00"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: Location not found
                  value: invalid location id
  /space/search/filters:
    get:
      tags:
        - Spaces / Seats
      summary: Get a list of search filters available in your system.
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - id: 45
                  icon: "fa-wheelchair-alt"
                  name: "Accessible Seat/Space"
                - id: 76
                  icon: "fa-plug"
                  name: "Power Available"
  /space/search/hourly/{id}:
    get:
      tags:
        - Spaces / Seats
      summary: Search for available seats/spaces in your system.
      parameters:
        - name: id
          in: path
          description: 'The location id to search.'
          required: true
          schema:
            type: integer
        - name: date
          in: query
          description: 'The date to search for availability on.<br>
          Format: YYYY-MM-DD.'
          required: true
          schema:
            type: string
            format: date
        - name: time_start
          in: query
          description: 'Search for availability starting at this time.<br>
          Format: HH:MM.'
          required: true
          schema:
            type: string
            format: time
        - name: time_end
          in: query
          description: 'Search for availability ending at this time.<br>
          Format: HH:MM.'
          required: true
          schema:
            type: string
            format: time
        - name: type
          in: query
          description: 'Should seats or spaces be searched.<br>
          Options: seat, space.'
          required: false
          schema:
            type: string
            default: space
        - name: capacity
          in: query
          description: 'Only relevant for spaces.<br>
The values 1-4 do not represent the actual capacity of the spaces, but the ranges specified in the Space Capacity Filters spaces settings page.<br>
Options:<br>
0: All Spaces<br>
1: Capacity Range 1<br>
2: Capacity Range 2<br>
3: Capacity Range 3<br>
4: Capacity Range 4'
          required: false
          schema:
            type: integer
            default: 0
        - name: category_id
          in: query
          description: 'Pass a category id here to only search for availability within that category.'
          required: false
          schema:
            type: integer
        - name: zone_id
          in: query
          description: 'Pass a zone id here to only search for availability within that zone.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: 'An array of search filter ids. 
          If multiple are provided then resources matching any of the search filters will be returned.'
          required: false
          schema:
            type: array
            items:
              type: integer
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              examples:
                example1:
                  summary: Successful response with a couple of exact matches.
                  value:
                    - exact_matches:
                        - space:
                            id: 123
                            name: "Study Room #1"
                            image: "https://libapps.s3.amazonaws.com/path/to/images/seat.jpg"
                            capacity: 20
                            zoneId: 4
                          category:
                            cid: 58
                            name: "Study Rooms"
                          start: "2024-04-25T14:00:00+10:00"
                          end: "2024-04-25T15:00:00+10:00"
                        - space:
                            id: 124
                            name: "Study Room #2"
                            image: ""
                            capacity: 8
                            zoneId: 8
                          category:
                            cid: 58
                            name: "Study Rooms"
                          start: "2024-04-25T14:00:00+10:00"
                          end: "2024-04-25T15:00:00+10:00"
                    - other_matches: [ ]
                example2:
                  summary: Successful response with no exact matches, but some other matches.
                  value:
                    - exact_matches: [ ]
                    - other_matches:
                        - seat:
                            id: 10433
                            name: "Seat 10"
                            image: "https://libapps.s3.amazonaws.com/path/to/images/seat.jpg"
                            status: "Active"
                            space:
                              id: 369
                              name: "Study Seats"
                          category:
                            cid: 58
                            name: "Study Rooms"
                          start: "2024-04-25T17:00:00+10:00"
                          end: "2024-04-25T18:00:00+10:00"
                        - seat:
                            id: 10438
                            name: "Seat 16"
                            image: ""
                            status: "Active"
                            space:
                              id: 369
                              name: "Study Seats"
                          category:
                            cid: 58
                            name: "Study Rooms"
                          start: "2024-04-25T18:00:00+10:00"
                          end: "2024-04-25T19:00:00+10:00"
                example3:
                  summary: Successful response with no matches of any type.
                  value:
                    - exact_matches: [ ]
                    - other_matches: [ ]
  /space/search/daily/{id}:
    get:
      tags:
        - Spaces / Seats
      summary: Search for available seats/spaces in your system.
      parameters:
        - name: id
          in: path
          description: 'The location id to search.'
          required: true
          schema:
            type: integer
        - name: date_start
          in: query
          description: 'The date to search for availability from.<br>
          Format: YYYY-MM-DD.'
          required: true
          schema:
            type: string
            format: date
        - name: date_end
          in: query
          description: 'The date to search for availability to.<br>
          Format: YYYY-MM-DD'
          required: true
          schema:
            type: string
            format: date
        - name: type
          in: query
          description: 'Should seats or spaces be searched.<br>
          Options: seat, space.'
          required: false
          schema:
            type: string
            default: space
        - name: capacity
          in: query
          description: 'Only relevant for spaces.<br>
The values 1-4 do not represent the actual capacity of the spaces, but the ranges specified in the Space Capacity Filters spaces settings page.<br>
Options:<br>
0: All Spaces<br>
1: Capacity Range 1<br>
2: Capacity Range 2<br>
3: Capacity Range 3<br>
4: Capacity Range 4'
          required: false
          schema:
            type: integer
            default: 0
        - name: category_id
          in: query
          description: 'Pass a category id here to only search for availability within that category.'
          required: false
          schema:
            type: integer
        - name: zone_id
          in: query
          description: 'Pass a zone id here to only search for availability within that zone.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: 'An array of search filter ids. 
          If multiple are provided then resources matching any of the search filters will be returned.'
          required: false
          schema:
            type: array
            items:
              type: integer
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              examples:
                example1:
                  summary: Successful response with a couple of exact matches.
                  value:
                    - exact_matches:
                        - space:
                            id: 123
                            name: "Study Room #1"
                            image: "https://libapps.s3.amazonaws.com/path/to/images/seat.jpg"
                            capacity: 20
                            zoneId: 4
                          category:
                            cid: 58
                            name: "Study Rooms"
                          start: "2024-04-25T14:00:00+10:00"
                          end: "2024-04-25T15:00:00+10:00"
                        - space:
                            id: 124
                            name: "Study Room #2"
                            image: ""
                            capacity: 8
                            zoneId: 8
                          category:
                            cid: 58
                            name: "Study Rooms"
                          start: "2024-04-25T14:00:00+10:00"
                          end: "2024-04-25T15:00:00+10:00"
                    - other_matches: [ ]
                example2:
                  summary: Successful response with no exact matches, but some other matches.
                  value:
                    - exact_matches: [ ]
                    - other_matches:
                        - seat:
                            id: 10433
                            name: "Seat 10"
                            image: "https://libapps.s3.amazonaws.com/path/to/images/seat.jpg"
                            status: "Active"
                            space:
                              id: 369
                              name: "Study Seats"
                          category:
                            cid: 58
                            name: "Study Rooms"
                          start: "2024-04-25T17:00:00+10:00"
                          end: "2024-04-25T18:00:00+10:00"
                        - seat:
                            id: 10438
                            name: "Seat 16"
                            image: ""
                            status: "Active"
                            space:
                              id: 369
                              name: "Study Seats"
                          category:
                            cid: 58
                            name: "Study Rooms"
                          start: "2024-04-25T18:00:00+10:00"
                          end: "2024-04-25T19:00:00+10:00"
                example3:
                  summary: Successful response with no matches of any type.
                  value:
                    - exact_matches: [ ]
                    - other_matches: [ ]
  /space/seat/{id}:
    get:
      tags:
        - Spaces / Seats
      summary: Returns information + availability details of a seat in your system.
      parameters:
        - name: id
          in: path
          description: 'The seat id to retrieve.'
          required: true
          schema:
            type: integer
        - name: availability
          in: query
          description: 'Either a single date, or a comma separated list of 2 dates (a start and end date, max range of 31 days).
      The keyword "next_only" can be used to return availability for the next date that this resource is available. 
      This will only return the first timeslot that the resource is available for. 
      Also note that this method only searches up to 10 days ahead of the current date.<br>Format: YYYY-MM-DD.'
          required: false
          schema:
            type: string
            format: date
            default: <Today's Date>
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - id: 123
                  name: "Assistive Workstation"
                  description: "The Assistive Workstation near the main entrance of the library."
                  image: "https://libapps.s3.amazonaws.com/path/to/images/seat.jpg"
                  status: "Active"
                  filter_ids:
                    - 8287
                    - 9176
                  availability:
                    - from: "2024-04-22T14:00:00+11:00"
                      to: "2024-04-22T14:30:00+11:00"
                    - from: "2024-04-22T14:30:00+11:00"
                      to: "2024-04-22T15:00:00+11:00"
                    - from: "2024-04-22T15:00:00+11:00"
                      to: "2024-04-22T15:30:00+11:00"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: Seat not found.
                  value: seat not found
  /space/seats/{id}:
    get:
      tags:
        - Spaces / Seats
      summary: Returns information + availability details of seats in your system.
      parameters:
        - name: id
          in: path
          description: 'The location id to retrieve.'
          required: true
          schema:
            type: integer
        - name: space_id
          in: query
          description: 'Pass a space id to only show details for this space. 
          If used with a seat_id, the space_id will be ignored.'
          required: false
          schema:
            type: integer
        - name: category_id
          in: query
          description: 'Pass a category id to only show details for this category. 
          If used with a space_id or seat_id filtering, the category_id will be ignored.'
          required: false
          schema:
            type: integer
        - name: seat_id
          in: query
          description: 'Pass a seat id to only show details for this seat.'
          required: false
          schema:
            type: integer
        - name: zone_id
          in: query
          description: 'Pass a zone id to only show details for this zone. 
          If used with a space_id or seat_id, the zone_id will be ignored.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: 'An array of search filter ids. 
          If multiple are provided then resources matching any of the search filters will be returned.'
          required: false
          schema:
            type: array
            items:
              type: integer
        - name: availability
          in: query
          description: 'Either a single date, or a comma separated list of 2 dates (a start and end date, max range of 31 days).
      The keyword "next_only" can be used to return availability for the next date that this resource is available. 
      This will only return the first timeslot that the resource is available for. 
      Also note that this method only searches up to 10 days ahead of the current date.<br>Format: YYYY-MM-DD.'
          required: false
          schema:
            type: string
            format: date
            default: <Today's Date>
        - name: page_index
          in: query
          description: 'For results pagination, this sets which page to retrieve (starting at 0 for the first page).'
          required: false
          schema:
            type: integer
            default: 0
        - name: page_size
          in: query
          description: 'For results pagination, this sets how many results per page to retrieve.<br>Range: 1-100.'
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - id: 123
                  name: "Assistive Workstation"
                  description: "The Assistive Workstation near the main entrance of the library."
                  image: "https://libapps.s3.amazonaws.com/path/to/images/seat.jpg"
                  status: "Active"
                  filter_ids:
                    - 8287
                    - 9176
                  availability:
                    - from: "2024-04-22T14:00:00+11:00"
                      to: "2024-04-22T14:30:00+11:00"
                    - from: "2024-04-22T14:30:00+11:00"
                      to: "2024-04-22T15:00:00+11:00"
                    - from: "2024-04-22T15:00:00+11:00"
                      to: "2024-04-22T15:30:00+11:00"
                - id: 456
                  name: "Assistive Workstation #2"
                  description: "The Assistive Workstations near the main entrance of the library."
                  image: "https://libapps.s3.amazonaws.com/path/to/images/seat.jpg"
                  status: "Active"
                  filter_ids: [ ]
                  availability:
                    - from: "2024-04-22T14:00:00+11:00"
                      to: "2024-04-22T14:30:00+11:00"
                    - from: "2024-04-22T15:00:00+11:00"
                      to: "2024-04-22T15:30:00+11:00"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: Location not found.
                  value: invalid location id
                example2:
                  summary: Category not found.
                  value: invalid group id
  /space/checkin:
    post:
      tags:
        - Spaces / Seats
      summary: Check in to a booking using a code
      parameters:
        - name: code
          in: query
          description: 'The code generated and emailed to the patron to check in to the booking.'
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: 'A booking id.'
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - checkInTime: "2024-04-22T14:00:00+11:00"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: Invalid value.
                  value: invalid input
                example2:
                  summary: Unable to find booking matching code.
                  value: invalid check-in code
                example3:
                  summary: Invalid check in code.
                  value: Unable to find booking matching code
                example4:
                  summary: Already checked in.
                  value: This booking has already been Checked In
                example5:
                  summary: Already checked out.
                  value: This booking has already been Checked Out
                example6:
                  summary: Too early for check in.
                  value: Unable to Check In for this booking until 10:30 (booking starts at 11:00)
                example7:
                  summary: Too late for check in.
                  value: Sorry, the latest possible Check In time for this booking was 11:15
  /space/checkout:
    post:
      tags:
        - Spaces / Seats
      summary: Check out of a booking using a code
      parameters:
        - name: code
          in: query
          description: 'The code generated and emailed to the patron to check in to the booking.'
          required: false
          schema:
            type: string
        - name: id
          in: query
          description: 'A booking id.'
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - checkOutTime: "2024-04-22T14:00:00+11:00"
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: Invalid value.
                  value: invalid input
                example2:
                  summary: Unable to find booking matching code.
                  value: invalid check-in code
                example3:
                  summary: Invalid check in code.
                  value: Unable to find booking matching code
                example4:
                  summary: Already checked out.
                  value: This booking has already been Checked Out
                example5:
                  summary: Not checked in.
                  value: This booking has not been Checked In for
                example6:
                  summary: Too late for check out.
                  value: Sorry, the latest possible Check Out time for this booking was 11:15
  /space/zone/{id}:
    get:
      tags:
        - Spaces / Seats
      summary: Returns details of a zone in your system.
      parameters:
        - name: id
          in: path
          description: 'The zone id to retrieve.'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - id: 789
                  name: "Upper floor"
                  description: "The upper floor of the main library."
                  itemIds:
                    - 10
                    - 78
                    - 56
                    - 789
        400:
          description: Failed operation
          content:
            text/plain:
              examples:
                example1:
                  summary: Zone not found.
                  value: zone not found
  /space/zones/{id}:
    get:
      tags:
        - Spaces / Seats
      summary: Returns details of zones in your system.
      parameters:
        - name: id
          in: path
          description: 'The location id to retrieve zones for.'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              example:
                - id: 789
                  name: "Upper floor"
                  description: "The upper floor of the main library."
                  itemIds:
                    - 10
                    - 78
                    - 56
                    - 789
                - id: 891
                  name: "Lower floor"
                  description: "The lower floor of the main library."
                  itemIds:
                    - 45
                    - 79
                    - 57
                    - 155
